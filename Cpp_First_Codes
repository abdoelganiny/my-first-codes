	جمع وطرح وضرب وقسمة وباقي قسمة رقمين
	short int number1, number2;
	cout << "enter number1 : ";
	cin >> number1;
	cout << "enter number2 : ";
	cin >> number2;

	cout << "number1 + number2 = " << number1 + number2 << endl;
	cout << "number1 - number2 = " << number1 - number2 << endl;
	cout << "number1 * number2 = " << number1 * number2 << endl;
	cout << "number1 / number2 = " << number1 / number2 << endl;
	cout << "number1 % number2 = " << number1 % number2 << endl;

------------------------------------------------------------
	نصف الرقم
	short int number;
	cout << "enter the number :";
	cin >> number;
	cout << "Half of the number is : " << number / 2 << endl;
------------------------------------------------------------
	مجموع الارقام
	short int number1, number2, number3, total;
	cout << "enter number1 : ";
	cin >> number1;
	cout << "enter number2 : ";
	cin >> number2;
	cout << "enter number3 : ";
	cin >> number3;
	cout << "total= " << number1 + number2 + number3 << endl;
	---------------------------------------------------------
		متوسط الدرجات
		float mark1, mark2, mark3,average;
	cout << "enter mark1 :";
	cin >> mark1;
	cout << "enter mark2 :";
	cin >> mark2;
	cout << "enter mark3 :";
	cin >> mark3;
	average = (mark1 + mark2 + mark3) / 3;
	cout << "Average : " << average << endl;
	---------------------------------------------------------
		عكس الارقام
		short int number1, number2;
	cout << "enter number1 :";
	cin >> number1;
	cout << "enter number2 :";
	cin >> number2;
	cout << "number1 : " << number1 << endl;
	cout << "number2 : " << number2 << endl;

	cout <<"number1 : "<< number2 << endl;
	cout <<"number2 : "<< number1 << endl;
	----------------------------------------------------------
		مساحة مستطيل
		short int A, B,Area;
	cout << "enter A:";
	cin >> A;
	cout << "enter B:";
	cin >> B;
	Area = A * B;
	cout << "Area = " << Area << endl;
	----------------------------------------------------------
		مساحة مثلث 
		float a, h, Area;
	cout << "enter a :";
	cin >> a;
	cout << "enter h :";
	cin >> h;
	Area = (a / 2) * h;
	cout << "Area = " << Area << endl;
	---------------------------------------------------------
	/ساحة دايرة بدلالة القطر
		float D, area;
	cout << "enter Diameter :";
	cin >> D;
	area = (3.14 * D * D) / 4;
	cout << "area = " << area << endl;
    ---------------------------------------------------------
	مساحة دايرة بدلالة محيطها
	float L,Area;
	const float Pi = 3.14;
	cout << "enter L :";
	cin >> L;
	Area = L * L / (4 * Pi);
	cout << "Area = " << Area << endl;
	---------------------------------------------------------
	مساحة دايرة جوا مثلث متساوي الساقين
	float a, b, Area;
	const float pi = 3.14;
	cout << "enter a :";
	cin >> a;
	cout << "enter b :";
	cin >> b;
	Area = pi * (b * b / 4) * ((2 * a - b) / (2 * a + b));
	cout << "Area = " << Area << endl;
	---------------------------------------------------------
	حساب رقم مرفوع لاس 2و3و4
	float number;
	cout << "enter the number :";
	cin >> number;
	cout << "number^2 = " << number * number << endl;
	cout << "number^3 = " << number * number * number << endl;
	cout << "number^4 = " << number * number * number*number << endl;
	---------------------------------------------------------
	الحصالة
	float pennies, nickels, dimes, quarters, dollars,Totalpennies;
	cout << "enter pennies :";
	cin >> pennies;
	cout << "enter nickels :";
	cin >> nickels;
	cout << "enter dimes :";
	cin >> dimes;
	cout << "enter quarters :";
	cin >> quarters;
	cout << "enter dollars :";
	cin >> dollars;
	Totalpennies = pennies * 1 + nickels * 5 + dimes * 10 + quarters * 25 + dollars * 100;
	float Totaldollars = Totalpennies / 100;
	cout << "Total pennies = " << Totalpennies << endl;
	cout << "Total dollars = " << Totaldollars << endl;
	------------------------------------------------------------
	باقي الحساب
	float Remainder, CashPaid, TotalBill;
	cout << "enter TotalBill :";
	cin >> TotalBill;
	cout << "enter Cashpaid :";
	cin >> CashPaid;
	Remainder = CashPaid - TotalBill;
	cout << "Remainder = " << Remainder << endl;
	------------------------------------------------------------
	ضريبة المطعم
	float billvalue, Totalvalue;
	cout << "enter billvalue :";
	cin >> billvalue;
	Totalvalue = billvalue * 1.1;
	Totalvalue = Totalvalue * 1.16;
	cout << "Total value = " << Totalvalue<<endl;
	------------------------------------------------------------
	مدة المهمة بالثانية
	int days, hours, min, sec,Totalseconds;
	cout << "enter days :";
	cin >> days;
	cout << "enter hours :";
	cin >> hours;
	cout << "enter min :";
	cin >> min;
	cout << "enter sec :";
	cin >> sec;
	Totalseconds = days * 24 * 60 * 60 + hours * 60 * 60 + min * 60 + sec;
	cout << "Total seconds = " << Totalseconds << endl;
	-------------------------------------------------------------
	حساب عدد الايام والساعات والدقايق والثواني بادخال عدد الثواني
	int days, hours, min, sec, numberofsec, m;
	cout << "enter number of seconds :";
	cin >> numberofsec;
	days = numberofsec / (24 * 60 * 60);
	m = numberofsec % (24 * 60 * 60);
	hours = m / (60 * 60);
	m = m % (60 * 60);
	min = m / 60;
	m = m % 60;
	sec = m;
	cout << days << ":" << hours << ":" << min << ":" << sec << endl;
	-------------------------------------------------------------
	عدد شهور القرض
	short int loanamount, monthleypayment, nofmonths;
	cout << "enter a loanamount :";
	cin >> loanamount;
	cout << "enter monthley payment :";
	cin >> monthleypayment;
	nofmonths = loanamount / monthleypayment;
	cout << "number of months is : " << nofmonths << endl;
	-------------------------------------------------------------
    عمليات منطقية على AND  OR  NOT gates
	bool result1,result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12, result13;
	bool result14, result15, result16, result17, result18, result19, result20, result21, result22, result23, result24 ;
	result1 = (12 >= 12);
	cout << result1 << endl;
	result2 = !(12 >= 12);
	cout << result2 << endl;
	result3 = (1 && 1);
	cout << result3 << endl;
	result4 = ((7 == 7) && (7 > 5));
	cout << result4 << endl;
	result5 = (12 > 7);
	cout << result5 << endl;
	result6 = !(12 < 7);
	cout << result6 << endl;
	result7 = (1 && 0);
	cout << result7 << endl;
	result8 = ((7 == 7) && (7 < 5));
	cout << result8 << endl;
	result9 = (8 < 6);
	cout << result9 << endl;
	result10 = !(8 < 6);
	cout << result10 << endl;
	result11 = (0 || 1);
	cout << result11 << endl;
	result12 = ((7 == 7) || (7 < 5));
	cout << result12 << endl;
	result13 = (8 == 8);
	cout << result13 << endl;
	result14 = !(8 == 8);
	cout << result14 << endl;
	result15 = (0 || 0);
	cout << result15 << endl;
	result16 = ((7 < 7) || (7 > 5));
	cout << result16 << endl;
	result17 = (12 <= 12);
	cout << result17 << endl;
	result18 = !(12 >= 12);
	cout << result18 << endl;
	result19 = !(0);
	cout << result19 << endl;
	result20 = (!(7 == 7) && (7 > 5));
	cout << result20 << endl;
	result21 = (7 == 5);
	cout << result21 << endl;
	result22 = !(7 == 5);
	cout << result22 << endl;
	result23 = !(1 || 0);
	cout << result23 << endl;
	result24 = ((7 == 7) && !(7 < 5));
	cout << result24 << endl;
	--------------------------------------------------------------
	عمليات على  AND OR NOT
	bool result1,result2, result3, result4, result5, result6 ;
	result1 = ((5>6 && 7==7)||(1 || 0));
	cout << result1 << endl;
	result2 = !((5 > 6 && 7 == 7) || (1 || 0));
	cout << result2 << endl;
	result3 = !((5 > 6 && 7 == 7) || !(1 || 0));
	cout << result3 << endl;
	result4 = ((5 > 6 || 7 == 7) && (1 || 0));
	cout << result4 << endl;
	result5 = (((5 > 6 && 7 <= 7) || (8>1 && 4<=3)) && 1);
	cout << result5 << endl;
	result6 = (((5 > 6 && !(7 <= 7)) && (8 > 1 || 4 <= 3)) || 1);
	cout << result6 << endl;
	--------------------------------------------------------------
	مساحة دايرة بدلالة اطوال اضلاع مثلث بداخلها
	float a, b, c, p, area;
	cout << "enter a:";
	cin >> a;
	cout << "enter b:";
	cin >> b;
	cout << "enter c:";
	cin >> c;
	p = (a + b + c) / 2;
	area = 3.14 * pow((a * b * c) / (4 * sqrt(p * (p - a) * (p - b) * (p - c))), 2);
	cout << "area = " << round(area) << endl;
        --------------------------------------------------------------
	معلومات شخصية باستخدام ال structure
	#include<iostream>
using namespace std;
struct address
{
	string street;
	string phone;
	string village;

};
struct information
{
	string name, city, country;
	short int age;
	char gender;
	bool married;
	address myvillage;
	address myphone;
	address mystreet;


};
int main() 
{
	information myinform,myaddress;
	cout << "enter your name :";
	cin>>myinform.name ;
	cout << "enter your age :";
	cin>>myinform.age ;
	cout << "enter your city :";
	cin>>myinform.city ;
	cout << "enter your country :";
	cin>>myinform.country ;
	cout << "enter your gender :";
	cin>>myinform.gender ;
	cout << "are you married? :";
	cin>>myinform.married ;
	cout << "enter your phone number :";
	cin>>myaddress.myphone.phone ;
	cout << "enter your street :";
	cin>>myaddress.mystreet.street ;
	cout << "enter your village :";
	cin>>myaddress.myvillage.village;
	cout <<"Name : "<< myinform.name << endl <<"Age : "<< myinform.age << endl <<"City : "<< myinform.city << endl <<"Country : "<< myinform.country << endl;
	cout <<"Gender : "<< myinform.gender << endl <<"Married : "<< myinform.married << endl <<"Phone : "<< myaddress.myphone.phone << endl;
	cout <<"Street : "<< myaddress.mystreet.street << endl <<"Village : "<< myaddress.myvillage.village << endl;
	----------------------------------------------------------------------------------------------------------------------
	structure وال enumمعلومات شخصية باستخدام ال 
	#include<iostream>
using namespace std;
struct address
{
	string street;
	string phone;
	string village;

};
struct information
{
	string name, city, country;
	short int age;
	address myvillage;
	address myphone;
	address mystreet;


};
enum marriage{single,married};
enum gender{male,female};
int main() 
{
	marriage statues;
	gender mygender;
	information myinform,myaddress;
	mygender = gender::male;
	statues = marriage::single;
	cout << "enter your name :";
	cin>>myinform.name ;
	cout << "enter your age :";
	cin>>myinform.age ;
	cout << "enter your city :";
	cin>>myinform.city ;
	cout << "enter your country :";
	cin>>myinform.country ;
	cout << "enter your phone number :";
	cin>>myaddress.myphone.phone ;
	cout << "enter your street :";
	cin>>myaddress.mystreet.street ;
	cout << "enter your village :";
	cin>>myaddress.myvillage.village;
	cout <<"Name : "<< myinform.name << endl <<"Age : "<< myinform.age << endl <<"City : "<< myinform.city << endl <<"Country : "<< myinform.country << endl;
	cout <<"Gender : "<<mygender << endl <<"Married : "<<statues << endl <<"Phone : "<< myaddress.myphone.phone << endl;
	cout <<"Street : "<< myaddress.mystreet.street << endl <<"Village : "<< myaddress.myvillage.village << endl;
	-----------------------------------------------------------------------------------------------
	متعددة enums و structures طباعة معلومات شخصية باستخدام 
#include<iostream>
using namespace std;
enum encolor { red, blue, yellow, orange };
enum enGender { Male, Female };
enum enstatues { Married, Single };

struct stAdress
{
	string country, city, streetname;
};
struct stContactinfo
{
	string phone;
	string email;
	stAdress Adress;
};
struct stPerson 
{
	string firstname;
	string lastname;
	stContactinfo contactinfo;

	encolor favcolor;
	enGender gender;
	enstatues statues;
};

int main()
{
	stPerson Person1;
	Person1.firstname = "abdo";
	Person1.lastname = "elganainy";
	Person1.gender = enGender::Male;
	Person1.statues = enstatues::Single;
	Person1.contactinfo.Adress.country = "Egypt";
	Person1.contactinfo.Adress.city = "mansora";
	Person1.contactinfo.Adress.streetname = "elnozha";
	Person1.contactinfo.phone = "01013749603";
	Person1.contactinfo.email = "abdo12345@gmail.com";
	Person1.favcolor = encolor::blue;

	cout <<"First Name : "<< Person1.firstname << endl <<"Last Name : "<< Person1.lastname << endl <<"Gender : "<< Person1.gender << endl <<"Statues : "<< Person1.statues << endl;
	cout <<"Country : "<< Person1.contactinfo.Adress.country << endl <<"City : "<< Person1.contactinfo.Adress.city << endl <<"Street Name : "<< Person1.contactinfo.Adress.streetname << endl;
	cout <<"Phone Number : "<< Person1.contactinfo.phone << endl <<"Email : "<< Person1.contactinfo.email << endl <<"Favorite Color : "<< Person1.favcolor << endl;

	return 0;
	----------------------------------------------------------------------------------------------------------
    string بعض العمليات على ال 
	string string1, string2,string3;
	cout << "enter string1 :";
	getline(cin, string1);
	cout << "enter string2 :";
	getline(cin, string2);
	cout << "enter string3 :";
	getline(cin, string3);
	cout << "the length of string1 = " << string1.length() << endl;
	cout << string1[0] << string1[2] << string1[4] << string1[7] << endl;
	string st4 = string2 + string3;
	cout << st4 << endl;
	int sum = stoi(string2) * stoi(string3);
	cout << sum << endl;
	------------------------------------------------------------------------------
	functions اول برنامج باستخدام ال 
void cardinfo()
{
	cout << "******************************" << endl;
	cout << "Name : Abdelahman Ahmed" << endl;
	cout << "City : Mansora" << endl;
	cout << "Country : Egypt" << endl;
	cout << "Age : 21" << endl;
	cout << "********************************" << endl<<endl;

}
void stars()
{
	cout << "******************" << endl;
	cout << "******************" << endl;
	cout << "******************" << endl;
	cout << "******************" << endl<<endl;
}
void printiloveprog()
{
	cout << "I love programming!\n\n";
	cout << "I promise to be the best developer ever!\n\n";
	cout << "I know it will take some time to practice , but I will achive my goal!\n\n";
	cout << "Best regards , \n";
	cout << "Abdelrahman Elganainy.\n\n";
}
void Hstars()
{
	cout << "*      *\n";
	cout << "*      *\n";
	cout << "********\n";
	cout << "*      *\n";
	cout << "*      *\n";
}
int main()
{
	cardinfo();
	stars();
	printiloveprog();
	Hstars();
	
	return 0;
}
    ------------------------------------------------------------------------------------
	cin.ignore باستخدام ال getlineحل مشكلة ال 
	int number;
	string name, country;

	cout << "enter country : ";
	cin >> country;
	cout << "enter name : ";
	cin.ignore(1, '\n');
	getline(cin, name);
	cout << "enter number : ";
	cin >> number;

	cout << name << endl << country << endl << number << endl;
	------------------------------------------------------------------------------------
	والفرق بينهم function ومرة بال procedure برنامج جمع رقمين مرة بال   
void mysumprocedure()
{
	float number1, number2;
	cout << "enter first number :";
	cin >> number1;
	cout << "enter second number :";
	cin >> number2;
	cout << "*******************\n" << number1 + number2 << endl;
}
float mysumfunction()
{
	float number1, number2;
	cout << "enter first number :";
	cin >> number1;
	cout << "enter second number :";
	cin >> number2;
	return number1 + number2;
}
int main()
{
	mysumprocedure();
	cout <<"*********************"<<endl<< mysumfunction()+5 << endl;


	return 0;
}
    ------------------------------------------------------------------------------------------
	للارقام swap بيعمل function برنامج باستخدام ال 
string swapnumbers(string num1,string num2)
{
	string x;
	x = num1;
	num1 = num2;
	num2 = x;
	return num1+"\n" + num2;

}
int main()
{
	string num1,num2;
	cout << "number 1 : ";
	cin >> num1;
	cout << "number 2 : ";
	cin >> num2;
	cout << num1 << endl << num2 << endl;
	cout<<"swaping :\n"<<swapnumbers(num1, num2) << endl;



	return 0;
}
    ------------------------------------------------------------------------------------
	functionمساحة المستطيل باستخدام ال
float recarea(float a,float b)
{
	return a * b;

}
int main()
{
	float a, b;
	cout << "enter a :";
	cin >> a;
	cout << "enter b :";
	cin >> b;
	cout << "area = " << recarea(a, b) << endl;
	--------------------------------------------------------------------------------------
	functionمساحة دايرةبمعلومية نصف القطر باستخدام ال  
float circlearea(float r)
{
	float bi = 3.14;
	return bi*pow(r,2);

}
int main()
{
	float r;
	cout << "enter r :";
	cin >> r;

	cout << "area = " << circlearea(r) << endl;
	-------------------------------------------------------------------------------------
	functionمساحة دايرة بمعلومية القطر باستخدام ال
float circlearea(float d)
{
	float bi = 3.14;
	return bi*pow(d,2)/4;

}
int main()
{
	float d;
	cout << "enter d :";
	cin >> d;

	cout << "area = " << circlearea(d) << endl;
	-------------------------------------------------------------------------------------
	functionمساحة دايرة بمعلومية محيطها باستخدام ال
float circlearea(float L)
{
	float bi = 3.14;
	return pow(L,2)/(4*bi);

}
int main()
{
	float L;
	cout << "enter L :";
	cin >> L;

	cout << "area = " << circlearea(L) << endl;
	-------------------------------------------------------------------------------------
	functionحساب مساحة دايرة محاطه بمثلث متساوي الساقين باستخدام ال
float circlearea(float a,float b)
{
	float bi = 3.14;
	return bi*pow(b,2)/4*((2*a-b)/(2*a+b));

}
int main()
{
	float a,b;
	cout << "enter a :";
	cin >> a;
	cout << "enter b :";
	cin >> b;

	cout << "area = " << circlearea(a,b) << endl;
	--------------------------------------------------------------------------------------
	functionحساب مساحة دايرة جواها مثلث غير متساوي الاضلاع باستخدام ال
float circlearea(float a,float b,float c)
{
	float bi = 3.14;
	float p=(a+b+c)/2;
	return bi* pow((a * b * c) / (4 * sqrt(p * (p - a) * (p - b) * (p - c))), 2);

}
int main()
{
	float a,b,c;
	cout << "enter a :";
	cin >> a;
	cout << "enter b :";
	cin >> b;
	cout << "enter c :";
	cin >> c;

	cout << "area = " << circlearea(a,b,c) << endl;
	--------------------------------------------------------------------------------------
	~~ power(2,3,4) of number using functions ~~
float powerof2(float number)
{
	return pow(number, 2);
};
float powerof3(float number)
{
	return pow(number, 3);

};
float powerof4(float number)
{
	return pow(number, 4);
};
int main()
{
	float number;
	cout << "enter number :";
	cin >> number;

	cout << "number ^2 = " << powerof2(number) << endl;
	cout << "number ^3 = " << powerof3(number) << endl;
	cout << "number ^4 = " << powerof4(number) << endl;
	---------------------------------------------------------------------------------------
	~~ power of number using functions~~
float powerofm(float number,float m)
{
	return pow(number, m);
};

int main()
{
	float number,m;
	cout << "enter number :";
	cin >> number;
	cout << "enter m :";
	cin >> m;

	cout << "number ^m = " << powerofm(number,m) << endl;
	---------------------------------------------------------------------------------------
	~~task duration in secoond using functions~~
float taskduration(float days,float hours,float minutes,float seconds)
{
	return days*24*60*60+hours*60*60+minutes*60+seconds;
};

int main()
{
	float days,hours,minutes,seconds;
	cout << "enter days :";
	cin >> days;
	cout << "enter hours :";
	cin >> hours;
	cout << "enter minutes :";
	cin >> minutes;
	cout << "enter seconds :";
	cin >> seconds;

	cout << "Task duration in seconds = " << taskduration(days,hours,minutes,seconds) << endl;
	---------------------------------------------------------------------------------------
~~info card using structures and procedure~~
struct strinfo
{
	string name, city, country;
	int age, monthleysalary;
	char gender;
	bool marriage;
};
void readinfo(strinfo &info)
{
	cout << "enter name :";
	cin >> info.name;
	cout << "enter country :";
	cin >> info.country;
	cout << "enter city :";
	cin >> info.city;
	cout << "enter age :";
	cin >> info.age;
	cout << "enter monthley salary :";
	cin >> info.monthleysalary;
	cout << "enter gender :";
	cin >> info.gender;
	cout << "are you married ?";
	cin >> info.marriage;
};
void printinfo(strinfo info)
{
	cout << "**************************************\n";
	cout << "Name : " << info.name << endl;
	cout << "Age : " << info.age << endl;
	cout << "Country : " << info.country << endl;
	cout << "City : " << info.city << endl;
	cout << "Monthly salary : " << info.monthleysalary << endl;
	cout << "Yearly salary : " << info.monthleysalary*12 << endl;
	cout << "Gender : " << info.gender << endl;
	cout << "Statues : " << info.marriage << endl;
	cout << "***************************************\n\n";

};
int main()
{
	strinfo person1;
	readinfo(person1);
	printinfo(person1);

	strinfo person2;
	readinfo(person2);
	printinfo(person2);


	return 0;
}
----------------------------------------------------------------------------------------------------
~~first program using arrays~~	
	float x[3], average;
	cout << "grade 1 = ";
	cin >> x[0];
	cout << "grade 2 = ";
	cin >> x[1];
	cout << "grade 3 = ";
	cin >> x[2];
	average = (x[0] + x[1] + x[2]) / 3;
	cout << "Average = " << average << endl;
---------------------------------------------------------------------------------------------------
~~Grades average using arrays with functions~~
void readgrades (float grade[3])
{
	cout << "grade 1 = ";
	cin >> grade[0];
	cout << "grade 2 = ";
	cin >> grade[1];
	cout << "grade 3 = ";
	cin >> grade[2];
};
float average(float grade[3])
{
	return ((grade[0] + grade[1] + grade[2]) / 3);
};
void printaverage(float grade[3])
{

	cout << "average = " <<average( grade) << endl;
}
int main()
{
	float grade[3];
	readgrades(grade);
	average(grade);
	printaverage(grade);

	return 0;
}

----------------------------------------------------------------------------------------------------
~~information card for many persons using arrays of structures~~
struct strinfo
{
	string firstname, lastname;
	int age, phone;
};
void getinfo(strinfo&info)
{
	cout << "enter first name :";
	cin >>info.firstname;
	cout << "enter last name:";
	cin >> info.lastname;
	cout << "enter age :";
	cin >>info.age;
	cout << "enter phone :";
	cin >> info.phone;
	cout << "*********************************\n";
};
void printinfo(strinfo info)
{
	cout << "*********************************\n";
	cout << info.firstname << endl;
	cout << info.lastname << endl;
	cout << info.age << endl;
	cout << info.phone << endl;
	cout << "*********************************\n";
};
void personsinfo(strinfo person[2])
{
	getinfo(person[0]);
	getinfo(person[1]);
};
void printpersonsinfo(strinfo person[2])
{
	printinfo(person[0]);
	printinfo(person[1]);
};

int main()
{
	strinfo person[2];
	personsinfo(person);
	printpersonsinfo(person);

	return 0;
}
--------------------------------------------------------------------------------------------
~~first program with if statement~~
	int age;
	bool license;
	cout << "enter age :";
	cin >> age;
	cout << "are you have license ?";
	cin >> license;
	if (age > 21 && license == 1)
	{
		cout << "Hired"<<endl;
	}
	else
	{
		cout << "Rejected" << endl;
	}
	cout << "\n done\n";
	return 0;
---------------------------------------------------------------------------------------------
~~if statement~~
	int mark;
	cout << "enter mark :";
	cin >> mark;
	if (mark >= 50)
	{
		cout << "Pass\n";
	}
	else
	{
		cout << "Fail\n";
	}


	return 0;
---------------------------------------------------------------------------------------------
~~if statement~~
	int mark1,mark2,mark3,average;
	cout << "enter mark1 :";
	cin >> mark1;
	cout << "enter mark2 :";
	cin >> mark2;
	cout << "enter mark3 :";
	cin >> mark3;
	average = (mark1 + mark2 + mark3) / 3;
	if (average >= 50)
	{
		cout << "average = " << average << endl;
		cout << "Pass\n";
	}
	else
	{
		cout << "average = " << average << endl;
		cout << "Fail\n";
	}


	return 0;
--------------------------------------------------------------------------------------------
~~if statement~~
	int age;
	cout << "enter age :";
	cin >> age;

	if  ( 18 <= age&& age <= 45)
	{

		cout << "valid\n";
	}
	else
	{

		cout << "invalid\n";
	}


	return 0;
---------------------------------------------------------------------------------------------
~~if statement~~
	int balance = 7500, pin;
	cout << "enter pin code :";
	cin >> pin;

	if (pin == 1234)
	{
		cout << "your balance = " << balance << endl;
	}
	else
	{
		cout << "wrong pin!\n";
	}

	return 0;
---------------------------------------------------------------------------------------------
~~if & else if & else statement~~
	int grade;
	cout << "enetr grade :";
	cin >> grade;

	if (grade > 89)
	{
		cout << "A\n";
	}
	else if (grade > 79)
	{
		cout << "B\n";
	}
	else if (grade > 69)
	{
		cout << "C\n";
	}
	else if (grade > 59)
	{
		cout << "D\n";
	}
	else if (grade > 49)
	{
		cout << "E\n";
	}
	else
	{
		cout << "F\n";
	}
	return 0;
------------------------------------------------------------------------------------------------
~~if & else if & else statement~~
	float totalsales,commission;
	cout << "enetr totalsales :";
	cin >> totalsales;

	if (totalsales >= 1000000)
	{
		commission = 0.01 * totalsales;
		cout << "Commission = "<<commission<<endl;
	}
	else if (totalsales >= 500000)
	{
		commission = 0.02 * totalsales;
		cout << "Commission = " << commission << endl;
	}
	else if (totalsales >= 100000)
	{
		commission = 0.03 * totalsales;
		cout << "Commission = " << commission << endl;
	}
	else if (totalsales >= 50000)
	{
		commission = 0.05 * totalsales;
		cout << "Commission = " << commission << endl;
	}
	else
	{
		commission = 0 * totalsales;
		cout << "Commission = " << commission << endl;
	}
	return 0;
-------------------------------------------------------------------------------------
~~if & else if & else statement~~
	float number1,number2,result;
	string operation;
	cout << "enter number1 :";
	cin >> number1;
	cout << "enter number2 :";
	cin >> number2;
	cout << "enter operation :";
	cin >> operation;

	if (operation == "+")
	{
		result = number1 + number2 ;
		cout << "result = "<< result <<endl;
	}
	else if (operation == "-")
	{
		result = number1 - number2;
		cout << "result = " << result << endl;
	}
	else if (operation == "*")
	{
		result = number1 * number2;
		cout << "result = " << result << endl;
	}
	else if (operation == "/")
	{
		result = number1 / number2;
		cout << "result = " << result << endl;
	}
	else
	{
		cout << "Wrong operation! " << endl;
	}
	return 0;
-------------------------------------------------------------------------------------------
~~if & else if & else statement~~
{
	int day;

	cout << "enter day :";
	cin >> day;

	if (day == 1)
	{

		cout << "Its sunday "<<endl;
	}
	else if (day == 2)
	{

		cout << "Its monday " << endl;
	}
	else if (day == 3)
	{

		cout << "Its tuesday " << endl;
	}
	else if (day == 4)
	{

		cout << "Its wendnesday " << endl;
	}
	else if (day == 5)
	{

		cout << "Its thursday " << endl;
	}
	else if (day == 6)
	{

		cout << "Its friday " << endl;
	}
	else if (day == 7)
	{

		cout << "Its saturday " << endl;
	}
	else
	{
		cout << "Wrong Day! " << endl;
	}
---------------------------------------------------------------------------------------------
~~if & else if & else statement~~
	int day;

	cout << "enter day :";
	cin >> day;

	if (day == 1)
	{

		cout << "Its january "<<endl;
	}
	else if (day == 2)
	{

		cout << "Its february " << endl;
	}
	else if (day == 3)
	{

		cout << "Its march " << endl;
	}
	else if (day == 4)
	{

		cout << "Its abril " << endl;
	}
	else if (day == 5)
	{

		cout << "Its may " << endl;
	}
	else if (day == 6)
	{

		cout << "Its june " << endl;
	}
	else if (day == 7)
	{

		cout << "Its july " << endl;
	}
	else if (day == 8)
	{

		cout << "Its august " << endl;
	}
	else if (day == 9)
	{

		cout << "Its september " << endl;
	}
	else if (day == 10)
	{

		cout << "Its october " << endl;
	}
	else if (day == 11)
	{

		cout << "Its november " << endl;
	}
	else if (day == 12)
	{

		cout << "Its december " << endl;
	}
	else
	{
		cout << "Wrong month! " << endl;
	}
	return 0;
------------------------------------------------------------------------------------------
~~switch case statement~~
int main()
{
	float number1, number2, result;
	int operation;
	int c;

	cout << "enter number1 :";
	cin >> number1;
	cout << "enter number2 :";
	cin >> number2;
	cout << "chose operation : 1=+ , 2=- , 3=* , 4=/ chose number\n";
	cout << "enter operation :";
	cin >> operation;

	switch (operation)
	{
	case 1:
		result = number1 + number2;
		cout << "result = " << result << endl;
		break;

	case 2:

		result = number1 - number2;
		cout << "result = " << result << endl;
		break;
	case 3:

		result = number1 * number2;
		cout << "result = " << result << endl;
		break;
	case 4:

		result = number1 / number2;
		cout << "result = " << result << endl;
		break;
	case 5:

		cout << "Wrong operation! " << endl;
		break;
	}
---------------------------------------------------------------------------------------------
~~switch case statement & enums~~
enum enday { sunday = 1, monday = 2, tuseday = 3, wednesday = 4, thursday = 5, friday = 6, saturday = 7 };
int main()
{
	enday day;
	int c;
	cout << "chose number : sunday = 1, monday = 2, tuseday = 3, wednesday = 4, thursday = 5, friday = 6, saturday = 7\n";
	cout << "enter day :";
	cin >> c;
	day = (enday)c;

	switch (day)
	{
	case 1:

		cout << "Its sunday " << endl;
		break;

	case 2:

		cout << "Its monday " << endl;
		break;

	case 3:

		cout << "Its tuseday " << endl;
		break;

	case 4:

		cout << "Its wednesday " << endl;
		break;

	case 5:

		cout << "Its thursday " << endl;
		break;

	case 6:

		cout << "Its friday" << endl;
		break;

	case 7:

		cout << "Its saturday " << endl;
		break;

	case 8:

		cout << "wrong day! " << endl;
		break;

	}
	
	return 0;
------------------------------------------------------------------------------------------------
~~week days using nested functions with enums~~
enum enweekday { sunday = 1, monday = 2, tuseday = 3, wednesday = 4, thursday = 5, friday = 6, saturday = 7,other };
void weekdaymenu()
{
	cout << "********************************\n";
	cout << "chose number : sunday = 1, monday = 2, tuseday = 3, wednesday = 4, thursday = 5, friday = 6, saturday = 7\n";
	cout << "enter day :\n";
	cout << "********************************\n";
}
enweekday getday()
{
	enweekday day;
	int wd;
	cin >> wd;
	return (enweekday)wd;
}
string dayname(enweekday day)
{
	switch (day)
	{
	case enweekday::sunday:

		return " sunday " ;
		break;

	case enweekday::monday:

		return " monday ";
		break;

	case enweekday::tuseday:

		return " tuseday ";
		break;

	case enweekday::wednesday:

		return " wednesday";
		break;

	case enweekday::thursday:

		return " thursday";
		break;

	case enweekday::friday:

		return " friday" ;
		break;

	case enweekday::saturday:

		return " saturday";
		break;

	case enweekday::other:

		return "wrong day! ";
		break;

	}

}

int main()
{
	weekdaymenu();
	cout << "today is : " << dayname(getday()) << endl;

	return 0;
}
----------------------------------------------------------------------------------------------------------------
~~months name using nested functions and enums~~
enum enmonth { jan = 1, feb = 2, march = 3, april = 4, may = 5, june = 6, july = 7,agust = 8,september = 9,oct = 10,november,december };
void monthmenu()
{
	cout << "********************************\n";
	cout << "chose number : jan = 1, feb = 2, march = 3, april = 4, may = 5, june = 6 \n";
	cout << "july = 7,agust = 8,september = 9,oct = 10, november = 11, december = 12\n";
	cout << "********************************\n";
}
enmonth getmonth()
{
	enmonth month;
	int m;
	cin >> m;
	return (enmonth)m;
}
string monthname(enmonth month)
{
	switch (month)
	{
	case enmonth::jan:

		return " JAN " ;
		break;

	case enmonth::feb:

		return " MONDAY ";
		break;

	case enmonth::march:

		return " MARCH ";
		break;

	case enmonth::april:

		return " APRIL";
		break;

	case enmonth::may:

		return " MAY";
		break;

	case enmonth::june:

		return " JUNE" ;
		break;

	case enmonth::july :

		return " JULY";
		break;

	case enmonth::agust:

		return " AGUST ";
		break;
	case enmonth::september:

		return " SEPTEMBER";
		break;
	case enmonth::oct:

		return " OCT";
		break;
	case enmonth::november:

		return " NOVEMBER";
		break;
	case enmonth::december:

		return " DECEMBER";
		break;
	default:
		return"not month name!";

	}

}

int main()
{
	monthmenu();
	cout << "this month is : " << monthname(getmonth()) << endl;

	return 0;
}
---------------------------------------------------------------------------------------------------------------------
~~information card using (for loop) & (array) ~~
struct strinfo
{
	string firstname, lastname, phone;
};
void getinfo(strinfo& info)
{
	cout << "enter first name :";
	cin >> info.firstname;
	cout << "enter last name :";
	cin >> info.lastname;
	cout << "enter phone :";
	cin >> info.phone;
}
void printinfo(strinfo info)
{
	cout << "***************************\n";
	cout << "first name : " << info.firstname << endl;
	cout << "last name : " << info.lastname << endl;
	cout << "phone : " << info.phone << endl;
	cout << "***************************\n";

}
void personinfo(strinfo person[100], int &length)
{
	cout << "enter from 1 to 100 , how many persons ? \n";
	cin >> length;

	for (int i = 0; i <= length - 1; i++)
	{
		cout << "enter information for person " << i + 1 << " :\n";
		getinfo(person[i]);
		cout << "*****************************\n";
	}
}
void printpersoninfo(strinfo person[100],int length)
{
	for (int i = 0; i <= length - 1; i++)
	{
		cout << "\n";
		printinfo(person[i]);
	}
}
int main()
{
	strinfo person[100];
	int length=0;

	personinfo(person,length);
	printpersoninfo(person,length);

	return 0;
}
-----------------------------------------------------------------------------------------------
~~From AA to ZZ using nested for loops~~	
	for (int i=65;i<=90;i++)
	{
		for (int j = 65;j <= 90;j++)
		{
			cout << char(i)<<char(j)<<endl;
		}
	}

	return 0;
------------------------------------------------------------------------------------------------
~~ using nested for loops~~
	for (int i=1;i<=10;i++)
	{
		for (int j = 10;j >= i;j--)
		{
			cout << "*";
		}
		cout << "\n";
	}

	return 0;
------------------------------------------------------------------------------------------------
~~Nested for loops~~
	for (int i=10;i>=1;i--)
	{
		for (int j = 1;j <= i;j++)
		{
			cout << j;
		}
		cout << "\n";
	}

	return 0;
-----------------------------------------------------------------------------------------------
~~Nested for loops~~
	for (int i=1;i<=10;i++)
	{
		for (int j = 1;j <= i;j++)
		{
			cout << j;
		}
		cout << "\n";
	}

	return 0;
-----------------------------------------------------------------------------------------------
~~Nested for loops~~
	for (int i=65;i<=70;i++)
	{
		for (int j = 65;j <= i;j++)
		{
			cout <<char(j);
		}
		cout << "\n";
	}

	return 0;
-----------------------------------------------------------------------------------------------
~~Nested for loops~~
	for (int i=1;i<=10;i++)
	{
		for (int j = i;j <= 10;j++)
		{
			cout << j ;
		}
		cout << "\n";
	}

	return 0;
---------------------------------------------------------------------------------------------
~~while loop~~
	int number = 10;
	while (number >= 1)
	{
		cout << number << endl;
		number--;
	}

	return 0;
-----------------------------------------------------------------------------------------------
~~Sum of odd numbers from 1 to N using while loop~~
	int number = 1;
	int N,sum=0;
	cout << "enter N :\n";
	cin >> N;
	while (number <= N)
	{
		sum += number;
		number=number+2;
	}
	cout << "sum of odd number from 1 to" << N <<" = "<< sum << endl;
	return 0;
-----------------------------------------------------------------------------------------------
~~Sum of even numbers from 1 to N using while loop~~
	int number = 2;
	int N,sum=0;
	cout << "enter N :\n";
	cin >> N;
	while (number <= N)
	{
		sum += number;
		number=number+2;
	}
	cout << "sum of odd number from 1 to" << N <<" = "<< sum << endl;
	return 0;
-----------------------------------------------------------------------------------------------
~~The factorial of numbers using while loop~~
{
	int number,N=1,factorial=1;
	cout << "enter number : ";
	cin >> number;
	while (number <= 0)
	{
		cout << "enter positive number ! \n";
		cin >> number;
	}
	while (N <= number)
	{
		factorial *= N;
		N++;
	}
	cout << "Factorial of " << number << " = " << factorial << endl;

	return 0;
}
-----------------------------------------------------------------------------------------------
~~number power of number using while loop ~~
	int number, M,P=1;
	int counter = 1;
	cout << "enter number : ";
	cin >> number;
	cout << "enter M : ";
	cin >> M;
	if (M == 0)
	{
		cout << "power of 0 = " << P;
	}
	else
	{
		while (M < 0)
		{
			cout << "enter positive power : ";
			cin >> M;
		}
		while (counter <= M)
		{
			P *= number;
			counter++;
		}
		cout << number << " power of " << M << " = " << P << endl;
	}
	return 0;
----------------------------------------------------------------------------------------------
~~user enter numbers and when he enter -99 the programm will print sum of numbers~~
	int number, sum = 0;
	
	cout << "enter number : ";
	cin >> number;

	while (number != -99)
	{
		sum += number;
		cout << "enter number : ";
		cin >> number;
	}
	cout << "Sum of numbers = " << sum << endl;

	return 0;
----------------------------------------------------------------------------------------------
~~characters from A to B using while loop~~
{
	int character=65;
	while (character <= 90)
	{
		cout << char(character) << endl;
		character++;
	}

	return 0;
}
---------------------------------------------------------------------------------------------
~~PIN code and card locked after 3 failed attemps~~
{
	int PIN, balance = 7500, attemps=0;
	while (attemps < 3)
	{
		cout << "enter PIN code : ";
		cin >> PIN;

		if (PIN == 1234)
		{
			cout << "balance = " << balance << endl;
			return 0;
		}
		else
		{
			cout << "Wrong PIN code!\n";
			attemps++;

		}
	}
	cout << "Card locked!\n";

	return 0;
}
----------------------------------------------------------------------------------------------
~~break statement~~
	int N = 20;
	int arr[10] = { 10,20,44,55,33,22,415,651,4,5 };
	for (int i = 0; i <=10; i++)
	{
		cout << "iteration : " << i + 1 << endl;
		if(N==arr[i])
		{
			cout <<N<<"found at iteration "<< i+1 << endl;
			break; 
		}
	}

	return 0;
---------------------------------------------------------------------------------------------
~~continue statement~~
	int number;
	int sum=0;
	for (int i = 1; i <=5; i++)
	{
		cout << "enter number : ";
		cin >> number;
		if(number>=50)
		{
			continue;
		}
		sum += number;

	}
	cout << "sum of numbers = " << sum << endl;

	return 0;
----------------------------------------------------------------------------------------------
~~number odd or even using function and procedure only~~
enum ennumbertype { odd = 1, even = 2 };
int readnumber()
{
	int number;
	cout << "enter number :";
	cin>>number;
	return number;
}
ennumbertype chekoddoreven(int number)
{
	int result=number%2;
	if (result == 0)
		return ennumbertype::even;
	else
		return ennumbertype::odd;

}
void printtype(ennumbertype numbertype)
{
	if (numbertype == ennumbertype::even)
		cout << "your number is even";
	else
		cout << "your number is odd";
}

int main()
{
	printtype(chekoddoreven(readnumber()));

	return 0;
}
-------------------------------------------------------------------------------------
~~Hire a driver case 1 using functions and procedure only~~
struct stinfo
{
	int age;
	bool license;
};
stinfo readinfo()
{
	stinfo info;
	cout << "enter your age :";
	cin >> info.age;
	cout << "are you have license ?";
	cin >> info.license;
	return info;
}
void printhiredorrejected(stinfo info)
{
	if (info.age >= 21 && info.license == 1)
		cout << "Hired";
	else
		cout << "Rejected";
}
int main()
{

	printhiredorrejected(readinfo());

	return 0;
}
--------------------------------------------------------------------------------------------
~~Hire a driver case 2 using functions and procedure only~~
struct stinfo
{
	int age;
	bool license,recommendation;
};
stinfo readinfo()
{
	stinfo info;
	cout << "enter your age :";
	cin >> info.age;
	cout << "are you have license ?";
	cin >> info.license;
	cout << "are you have recommendation ?";
	cin >> info.recommendation;
	return info;
}
bool isaccepted(stinfo info)
{
	if (info.recommendation)
		return true;
	else
	    return (info.age >= 21 && info.license);
}
void printresult(stinfo info)
{
	if (isaccepted(info))
		cout << "\nHired";
	else
		cout << "\nRejected";
}
int main()
{

	printresult(readinfo());

	return 0;
}
-----------------------------------------------------------------------------------
~~half of number using function and procedures~~
int readnumber()
{
	int number;
	cout << "enter number :";
	cin >> number;
	return number;
}
float halfnumber(int number)
{

	return  (float)number / 2;
}
void printresult(int number)
{
	string result = "Half of " + to_string(number) + "= " + to_string(halfnumber(number));
	cout << result << endl;
}
int main()
{
	printresult(readnumber());
	return 0;
}
-------------------------------------------------------------------------------------
~~check pass or fail using functions & procedures~~
enum enpassfail { pass=1, fail=2 };
int readmark()
{
	int mark;
	cout << "enter Mark :";
	cin >> mark;
	return mark;
}
enpassfail checkmark(int mark)
{
	if (mark >= 50)
		return enpassfail::pass;
	else
		return enpassfail::fail;
}
void printresult(int mark)
{
	if (checkmark(mark) == enpassfail::pass)
		cout << "Pass" << endl;
	else
		cout << "Fail" << endl;
}
int main()
{
	printresult(readmark());
	return 0;
}
--------------------------------------------------------------------------------
~~check pass or fail average using functions & procedures~~
enum enpassfail{pass=1,fail=2};
void readnumbers(int& num1, int& num2, int& num3)
{
	cout << "enter number 1 :";
	cin >> num1;
	cout << "enter number 2 :";
	cin >> num2;
	cout << "enter number 3 :";
	cin >> num3;
}
int sumofnumbers(int num1, int num2, int num3)
{
	int sum;
	sum = num1 + num2 + num3;
	return sum;
}
float calculateaverage(int num1, int num2, int num3)
{
	float average = (float)sumofnumbers(num1,num2,num3)/ 3;
	return average;
}
enpassfail checkaverage(float average)
{
	if (average >= 50)
		return enpassfail::pass;
	else
		return enpassfail::fail;
}
void printresult(float average)
{

	cout << "average = " << average << endl;
	if (checkaverage(average) == enpassfail::pass)
		cout << "Pass\n";
	else
		cout << "Fail\n";

}
int main()
{
	int num1, num2, num3;

	readnumbers(num1, num2, num3);
	printresult(calculateaverage(num1, num2, num3));
	return 0;
}
----------------------------------------------------------------------------------
~~Max of 2 numbers using functions and procedures~~
void readnumber(int& num1, int& num2)
{
	cout << "enter number 1 :";
	cin >> num1;
	cout << "enter number 2 :";
	cin >> num2;
}
int Maxof2numbers(int num1, int num2)
{
	if (num1 > num2)
		return num1;
	else
		return num2;
}
void printMax(int Max)
{
	cout << "The Max Number is " << Max << endl;
}
int main()
{
	int num1, num2;
	readnumber(num1, num2);
	printMax(Maxof2numbers(num1, num2));

	return 0;
}
--------------------------------------------------------------------------------
~~Max of 3 numbers using functions and procedures~~
void readnumber(int& num1, int& num2, int& num3)
{
	cout << "enter number 1 :";
	cin >> num1;
	cout << "enter number 2 :";
	cin >> num2;
	cout << "enter number 3 :";
	cin >> num3;
}
int Maxof3numbers(int num1, int num2, int num3)
{
	if (num1 > num2)
		if (num1 > num3)
			return num1;
		else
			return num3;
	else
		if (num2 > num3)
			return num2;
		else
			return num3;
}
void printMax(int Max)
{
	cout << "The Max Number is " << Max << endl;
}
int main()
{
	int num1, num2, num3;
	readnumber(num1, num2, num3);
	printMax(Maxof3numbers(num1, num2, num3));

	return 0;
}
--------------------------------------------------------------------------------------
~~Swap Numbers Using Functions and Procedures~~
void ReadNumbers(int& N1, int& N2)
{
	cout << "Enter Number 1 :";
	cin >> N1;
	cout << "Enter Number 2 :";
	cin >> N2;
}
void SwapNumbers(int& N1, int& N2)
{
	int Temple;
	Temple = N1;
	N1 = N2;
	N2 = Temple;
}
void PrintNumbers(int n1, int n2)
{
	cout << "\nNumber 1 = " << n1;
	cout << "\nNumber 2 = " << n2<<endl;
}

int main()
{
	int Number1, Number2;
	ReadNumbers(Number1, Number2);
	PrintNumbers(Number1, Number2);
	SwapNumbers(Number1, Number2);
	PrintNumbers(Number1, Number2);

	return 0;
}
--------------------------------------------------------------------------------------
~~Rectangular Area~~
void ReadNumbers(float& A, float& B)
{
	cout << "Enter Rectangular Length A :";
	cin >> A;
	cout << "Enter Rectangular Wedth B :";
	cin >> B;
}
float CalculateRectangleArea(float A, float B)
{
	return A * B;
}
void PrintArea(float Area)
{
	cout << "Area = " << Area;
}

int main()
{
	float Length, Wedth;
	ReadNumbers(Length, Wedth);
	PrintArea(CalculateRectangleArea(Length, Wedth));

	return 0;
}
---------------------------------------------------------------------------------------
~~Rectangular Area by Length and Diagonal~~
void ReadNumbers(float& A, float& D)
{
	cout << "Enter Rectangular Length A :";
	cin >> A;
	cout << "Enter Rectangular Diagonal D :";
	cin >> D;
}
float CalculateRectangleArea(float A, float D)
{
	return A * sqrt(pow(D,2)-pow(A,2));
}
void PrintArea(float Area)
{
	cout << "Area = " << Area;
}

int main()
{
	float Length, Diagonal;
	ReadNumbers(Length, Diagonal);
	PrintArea(CalculateRectangleArea(Length, Diagonal));

	return 0;
}
---------------------------------------------------------------------------------------
~~Triangle Area by Length and Height~~
void ReadNumbers(float& a, float& h)
{
	cout << "Enter Triangle Length a :";
	cin >> a;
	cout << "Enter Triangle Hight h :";
	cin >> h;
}
float CalculateTriangleArea(float A, float h)
{
	return 0.5*A * h;
}
void PrintArea(float Area)
{
	cout << "Triangle Area = " << Area;
}

int main()
{
	float Length, Hight;
	ReadNumbers(Length, Hight);
	PrintArea(CalculateTriangleArea(Length, Hight));

	return 0;
}
------------------------------------------------------------------------------------------
~~Circle Area by Diameter~~
float ReadDiameter()
{
	float d;
	cout << "Enter Diameter :";
	cin >> d;
	return d;
}
float CalculateCircleAreabyDiameter(float d)
{
	const float bi = 3.141592653589793238;
	return (bi*pow(d,2))/4;
}
void PrintArea(float Area)
{
	cout << "Circle Area = " << Area;
}

int main()
{

	
	PrintArea(CalculateCircleAreabyDiameter(ReadDiameter()));

	return 0;
}
-------------------------------------------------------------------------------------------
~~Circle Area by Circumference~~
float ReadCircumference()
{
	float L;
	cout << "Enter Circumference :";
	cin >> L;
	return L;
}
float CalculateCircleAreabyCircumference(float L)
{
	const float bi = 3.141592653589793238;
	return pow(L,2)/(4*bi);
}
void PrintArea(float Area)
{
	cout << "Circle Area = " << Area;
}

int main()
{

	
	PrintArea(CalculateCircleAreabyCircumference(ReadCircumference()));

	return 0;
}
-------------------------------------------------------------------------------------------
~~Circle Area by Isosceles Triangle~~
void ReadIsoscelesTriangleSides(float& a,float& b)
{

	cout << "Enter a :";
	cin >> a;
	cout << "Enter b :";
	cin >> b;
}
float CalculateCircleAreabyIsoscelesTriangle(float a,float b)
{
	const float bi = 3.141592653589793238;
	return bi*pow(b,2)/4*((2*a-b)/(2*a+b));
}
void PrintArea(float Area)
{
	cout << "Circle Area = " << Area;
}

int main()
{
	float a, b;
	ReadIsoscelesTriangleSides(a, b);
	PrintArea(CalculateCircleAreabyIsoscelesTriangle(a,b));

	return 0;
}
-------------------------------------------------------------------------------------------
~~Circle Area around Triangle~~
void ReadTriangleSides(float& a,float& b,float& c)
{

	cout << "Enter a :";
	cin >> a;
	cout << "Enter b :";
	cin >> b;
	cout << "Enter c :";
	cin >> c;
}
float CalculateCircleAreabyTriangle(float a,float b,float c)
{
	const float bi = 3.141592653589793238;
	float P = (a + b + c) / 2;
	return bi*pow((a*b*c/(4*sqrt(P*(P-a)*(P-b)*(P-c)))),2);
}
void PrintArea(float Area)
{
	cout << "Circle Area = " << Area;
}

int main()
{
	float a, b,c;
	ReadTriangleSides(a, b,c);
	PrintArea(CalculateCircleAreabyTriangle(a,b,c));

	return 0;
}
---------------------------------------------------------------------------------------------------
~~Validate age in range~~
int ReadAge()
{
	int age;
	cout << "Enter Age between 18 and 45 :";
	cin >> age;
	return age;
}
bool ValidateNumberInRange(int From, int age, int To)
{
	return (age>=From && age<=To);
}
int ReadUntilAgeBetween(int From, int To)
{
	int Age = 0;
	do
	{
		Age=ReadAge();
	} while (!ValidateNumberInRange(From, Age, To));
	return Age;
}
void PrintResult(int age)
{
	if (ValidateNumberInRange(18, age, 45))
		cout << age << " is a valid age " << endl;
	else
		cout << age << " is invalid age " << endl;
}
int main()
{
	PrintResult(ReadUntilAgeBetween(18,45));

	return 0;
}
-------------------------------------------------------------------------------------------
~~Power of 2,3,4~~
int ReadNumber()
{
	int number;
	cout << "Enter number :";
	cin >> number;
	return number;
}
void PrintResult(int number)
{
	int a, b, c;
	a = number * number;
	b = number * number * number;
	c=number* number * number * number;
	cout << a << " " << b << " " << c << endl;
}
int main()
{
	PrintResult(ReadNumber());

	return 0;
}

-------------------------------------------------------------------------------------------
~~Power of M~~
int ReadNumber()
{
	int number;
	cout << "Enter number :";
	cin >> number;
	return number;
}
int ReadPower()
{
	int power;
	cout << "Enter M :";
	cin >> power;
	return power;
}
int PowerOfM(int power,int number)
{
	if (power == 0)
		return 1;
	int P = 1;
	for (int i = 1;i <= power;i++)
	{
		P = P * number;
	}
	return P;
}
void PrintResult(int Result)
{
	cout << "Result = " << Result << endl;
}
int main()
{
	PrintResult(PowerOfM(ReadPower(), ReadNumber()));

	return 0;
}
----------------------------------------------------------------------------------
~~Grade A,B,C,D,E,F~~
int ReadNumberInRange(string Message,int From, int To)
{
	int number;
	do
	{
		cout << Message;
		cin >> number;
	} while (number < From || number> To);
	return number;
}
char GetGradeLetter(int grade)
{
	if (grade >= 90)
		return 'A';
	else if (grade >= 80)
		return'B';
	else if (grade >= 70)
		return'C';
	else if (grade >= 60)
		return'D';
	else if (grade >= 50)
		return'E';
	else
		return 'F';
}
int main()
{
	cout << "Result = " << GetGradeLetter(ReadNumberInRange(0,100));

	return 0;
}
---------------------------------------------------------------------------------
~~Calculate Total Commision~~
int ReadTotalSales()
{
	int Totalsales;
	cout << "Enter Total Sales :";
	cin >> Totalsales;
	return Totalsales;
}
float CommisionPercentage(int Totalsales)
{
	if (Totalsales >= 1000000)
		return 0.01;
	else if (Totalsales >= 500000)
		return 0.02;
	else if (Totalsales >= 100000)
		return 0.03;
	else if (Totalsales >= 50000)
		return 0.05;
	else
		return 0;
}
float CalculateCommision(int Totalsales)
{
	return Totalsales * CommisionPercentage(Totalsales);
}
int main()
{
	float totalsales=ReadTotalSales();
	cout << "Commision Percentage = " << CommisionPercentage(totalsales) << endl;
	cout << "Total Commision = " << CalculateCommision(totalsales);

	return 0;
}
-------------------------------------------------------------------------------
~~Calculate Total Pennies and Dollars~~
struct stPiggyBankContent
{
	int pennies, nickels, dimes, quarters, dollars;
};
stPiggyBankContent ReadTotalContent()
{
	stPiggyBankContent TotalContent;
	cout << "Enter Pennies :";
	cin >> TotalContent.pennies;
	cout << "Enter Nickels :";
	cin >> TotalContent.nickels;
	cout << "Enter Dimes :";
	cin >> TotalContent.dimes;
	cout << "Enter Quarters :";
	cin >> TotalContent.quarters;
	cout << "Enter Dollars :";
	cin >> TotalContent.dollars;
	return TotalContent;
}
int CalculateTotalPennies(stPiggyBankContent TotalPennies)
{
	return TotalPennies.pennies + TotalPennies.nickels * 5 + TotalPennies.dimes * 10 + TotalPennies.quarters * 25 + TotalPennies.dollars * 100;
}
int main()
{
	float TotalPennies = CalculateTotalPennies(ReadTotalContent());
	cout << "\nTotal Pennies = " << TotalPennies << endl;
	cout << "Total Dollars = " << TotalPennies / 100 << endl;

	return 0;
}
----------------------------------------------------------------------------------------------------
~~Simple Calculater~~
enum enOperationType{ Add ='+',Subtract='-',Multiply='*',Divide='/' };
int ReadNumber(string Message)
{
	int number;
	cout << Message ;
	cin >> number;
	return number;
}
enOperationType ReadOpType()
{
	char OT;
	cout << "Enter Operation Type ( + , - , * , / ) :";
	cin >> OT;
	return (enOperationType)OT;
}
float Calculate(float number1, float number2, enOperationType OT)
{
	switch (OT)
	{
	case enOperationType::Add:
		return number1 + number2;
	case enOperationType::Divide:
		return number1 / number2;
	case enOperationType::Multiply:
		return number1 * number2;
	case enOperationType::Subtract:
		return number1 - number2;
	default:
		return number1 + number2;
	}
}
int main()
{ 
	float number1, number2;
	number1=ReadNumber("Enter Number 1 :");
	number2=ReadNumber("Enter Number 2 :");
	enOperationType OpType = ReadOpType();
	cout << "Result = " << Calculate(number1, number2, OpType);

	return 0;
}
-----------------------------------------------------------------------------------------------
~~Sum Until -99~~
float ReadNumber(string Message)
{
	int number;
	cout << Message ;
	cin >> number;
	return number;
}
float SumNumbers()
{
	float sum = 0, counter = 1;
	float number ;
	do
	{
	    number = ReadNumber("Enter Number " + to_string(counter) + ": ") ;
		if (number == -99)
			break;
		sum += number;
		counter++;
	} while (number != -99);
	return sum;
}

int main()
{ 
	cout << "Result = " << SumNumbers() << endl;

	return 0;
}
------------------------------------------------------------------------------------------
~~Check the Number is Prime or not Prime~~
enum enCheckPrime{Prime=1,NotPrime=2};
float ReadPositiveNumber(string Message)
{
	int number;
	do
	{
		cout << Message;
		cin >> number;
	} while (number <= 0);

	return number;
}
enCheckPrime CheckPrimeNumber(int number)
{
	int M= number / 2;
	for (int i = 2;i < M;i++)
	{
		if (number % i == 0)
			return enCheckPrime::NotPrime;
	}
	return enCheckPrime::Prime;
}
void PrintResult(int number)
{
	switch (number)
	{
	case enCheckPrime::NotPrime:
		cout << "The Number is not Prime \n";
		break;
	case enCheckPrime::Prime:
		cout << "The Number is Prime \n";
		break;
	}
}
int main()
{ 
	PrintResult(CheckPrimeNumber(ReadPositiveNumber("Enter Positive Number : ")));

	return 0;
}
--------------------------------------------------------------------------------------------------
~~Calculate Remainder~~
float ReadPositiveNumber(string Message)
{
	int number;
	do
	{
		cout << Message;
		cin >> number;
	} while (number <= 0);

	return number;
}
float CalculateRemainder(float Totalbill, float Cashpaid)
{
	return Cashpaid - Totalbill;
}
int main()
{ 
	float Totalbill = ReadPositiveNumber("Enter TotalBill : ");
	float CashPaid = ReadPositiveNumber("Enter CashPaid : ");
	cout << "**************************************\n";
	cout << "Remainder = " << CalculateRemainder(Totalbill, CashPaid);

	return 0;
}
--------------------------------------------------------------------------------------------------
~~TotalBill after service and tax~~
float ReadPositiveNumber(string Message)
{
	int number;
	do
	{
		cout << Message;
		cin >> number;
	} while (number <= 0);

	return number;
}
float CalculateTotalBill(float Totalbill)
{
	Totalbill = Totalbill * 1.1;
	Totalbill = Totalbill * 1.16;
	return Totalbill;
}
int main()
{ 
	float Totalbill=CalculateTotalBill(ReadPositiveNumber("Enter TotalBill : "));
	cout << "TotalBill after service and tax : " << Totalbill << endl;

	return 0;
}
---------------------------------------------------------------------------------------------------
~~Hours to days and weeks~~
float ReadPositiveNumber(string Message)
{
	int number;
	do
	{
		cout << Message;
		cin >> number;
	} while (number <= 0);

	return number;
}
float HoursToWeeks(float number)
{
	return number / (7 * 24);
}
float HoursToDays(float number)
{
	return number / 24;
}
int main()
{ 
	float days, weeks,hours;
	hours = ReadPositiveNumber("Enter Total Hours : ");
	days = HoursToDays(hours);
	weeks = HoursToWeeks(hours);
	cout << "Total days = " << days << endl;
	cout << "Total weeks = " << weeks << endl;

	return 0;
}
--------------------------------------------------------------------------------------
~~Task duration in seconds~~
struct stTaskDuration
{
	int seconds, minutes, hours, days;
};
float ReadPositiveNumber(string Message)
{
	int number;
	do
	{
		cout << Message;
		cin >> number;
	} while (number <= 0);

	return number;
}
stTaskDuration ReadTaskDuration()
{
	stTaskDuration taskduration;
	taskduration.days = ReadPositiveNumber("Enter Total Days :");
	taskduration.hours = ReadPositiveNumber("Enter Total Hours :");
	taskduration.minutes = ReadPositiveNumber("Enter Total Minutes :");
	taskduration.seconds = ReadPositiveNumber("Enter Total Seconds :");
	return taskduration;
}
int TaskDurationInSeconds(stTaskDuration Taskduration)
{
	int totalseconds = 0;
	totalseconds = Taskduration.days * 24 * 60 * 60;
	totalseconds += Taskduration.hours * 60 * 60;
	totalseconds += Taskduration.minutes * 60;
	totalseconds += Taskduration.seconds;
	return totalseconds;

}
int main()
{ 
	cout << "\nTask duration in seconds = " << TaskDurationInSeconds(ReadTaskDuration()) << endl;

	return 0;
}
------------------------------------------------------------------------------------------------
~~Total Seconds to days : hours : minutes : seconds~~
struct stTaskDuration
{
	int seconds, minutes, hours, days;
};
float ReadPositiveNumber(string Message)
{
	int number;
	do
	{
		cout << Message;
		cin >> number;
	} while (number <= 0);

	return number;
}
stTaskDuration SecondsToTaskDuration(int totalseconds)
{
	stTaskDuration Taskduraion;
	const int secondperday= 24 * 60 * 60;
	const int seconperhours=  60 * 60;
	const int secondperminute=  60;
	int remainder;
	Taskduraion.days = totalseconds / secondperday;
	remainder= totalseconds % secondperday;
	Taskduraion.hours = remainder / seconperhours;
	remainder= remainder % seconperhours;
	Taskduraion.minutes = remainder / secondperminute;
	remainder= remainder % secondperminute;
	Taskduraion.seconds = remainder;

	return Taskduraion;

}
void PrintTaskDuration(stTaskDuration taskduration)
{
	cout << "Task Duration : ";
	cout << taskduration.days << " : " << taskduration.hours << " : " << taskduration.minutes << " : "
		<< taskduration.seconds << endl;
}
int main()
{ 
	PrintTaskDuration(SecondsToTaskDuration(ReadPositiveNumber("Enter Total Seconds :")));

	return 0;
}
------------------------------------------------------------------------------------------------
~~Day of Week using enum~~
enum endayofweek{sun=1,mon=2,tue=3,wed=4,thr=5,fri=6,sat=7};
int ReadDayInRange(string Message,int from,int to)
{
	int number;
	do
	{
		cout << Message;
		cin >> number;
	} while (number <from || number>to);

	return number;
}
endayofweek ReadDayofWeek()
{
	int dayofweek;
	dayofweek = ReadDayInRange("Enter day number from 1 to 7 :", 1, 7);
	return (endayofweek)dayofweek;
}
string GetDayOfWeek(endayofweek day)
{
	switch (day)
	{
	case endayofweek::sun:
		return "sunday";
	case endayofweek::mon:
		return "monday";
	case endayofweek::tue:
		return "tuesday";
	case endayofweek::wed:
		return "wednesday";
	case endayofweek::thr:
		return "thrusday";
	case endayofweek::fri:
		return "friday";
	case endayofweek::sat:
		return "satrday";
	}
}
int main()
{ 
	cout<<GetDayOfWeek(ReadDayofWeek());

	return 0;
}
---------------------------------------------------------------------------------------------------
~~Print Month using enum~~
enum enMonth{jan=1,feb=2,mar=3,apr=4,may=5,jun=6,jul=7,ags=8,spt=9,oct=10,nov=11,dec=12};
int ReadMonthInRange(string Message,int from,int to)
{
	int number;
	do
	{
		cout << Message;
		cin >> number;
	} while (number <from || number>to);

	return number;
}
enMonth ReadMonth()
{
	int Month;
	Month = ReadMonthInRange("Enter day number from 1 to 12 :", 1, 12);
	return (enMonth)Month;
}
string GetMonth(enMonth month)
{
	switch (month)
	{
	case enMonth::jan:
		return "janurary";
	case enMonth::feb:
		return "february";
	case enMonth::mar:
		return "march";
	case enMonth::apr:
		return "april";
	case enMonth::may:
		return "may";
	case enMonth::jun:
		return "june";
	case enMonth::jul:
		return "july";
	case enMonth::ags:
		return "agust";
	case enMonth::spt:
		return "september";
	case enMonth::oct:
		return "october";
	case enMonth::nov:
		return "november";
	case enMonth::dec:
		return "december";
	}
}
int main()
{ 
	cout<<GetMonth(ReadMonth());

	return 0;
}
------------------------------------------------------------------------------------------------
~~Print Capital Letters~~
void PrintLetters()
{
	for (int i = 65; i <= 90; i++)
	{
		cout << char(i) << endl;
	}
}
int main()
{ 
	PrintLetters();

	return 0;
}
------------------------------------------------------------------------------------------------
~~Loan installment months~~
void ReadNumbers(int& loanamount, int& monthlypayment)
{
	cout << "Enter Loan Amount :";
	cin >> loanamount;
	cout<< "Enter Monthly Payment :";
	cin >> monthlypayment;
}
int numberofmonths(int loanamount,int monthlypayment)
{
	return loanamount / monthlypayment;
}
int main()
{ 
	int loanamount, monthlypayment;
	ReadNumbers(loanamount, monthlypayment);
	cout << "number of months = " << numberofmonths(loanamount, monthlypayment)<<endl;

	return 0;
}
------------------------------------------------------------------------------------------------
~~PIN Code~~
string ReadPinCode()
{
	string pin;
	cout << "Enter Pin Code :";
	cin >> pin;
	return pin;

}
bool Login()
{
	string pincode ;
	do
	{
		pincode = ReadPinCode();
		if (pincode == "1234")
			return 1;
		else
		{
			cout << "\nwrong PIN !\n";
			system("color 4F");
		}
	} while (pincode != "1234");
}
int main()
{ 
	if (Login())
	{
		cout << "Your Balance = " << 7500;
		system("color 2F");
	};

	return 0;
}
---------------------------------------------------------------------------------------
~~PIN Code~~
string ReadPinCode()
{
	string pin;
	cout << "Enter Pin Code :";
	cin >> pin;
	return pin;

}
bool Login()
{
	string pincode ;
	int counter = 3;
	do
	{
		counter--;
		pincode = ReadPinCode();
		if (pincode == "1234")
			return 1;
		else
		{
			cout << "\nwrong PIN ! you have "<<counter<<" more tries.\n";
			system("color 4F");
		}
	} while (counter>=1&&pincode != "1234");
	return 0;
}
int main()
{ 
	if (Login())
	{
		cout << "Your Balance = " << 7500;
		system("color 2F");
	}
	else
	{
		cout << "\nYour card locked! call the bank for help \n";
	}

	return 0;
}
-----------------------------------------------------------------------------------------------------
~~Multiplication Table from 1 to 10~~
void HeadofTable()
{
	cout << "\n\t\t\tMultiplication Table from 1 to 10 \n\n";
	for (int i = 1;i <= 10;i++)
	{
		cout << "\t    " << i << "  ";
	}
	cout << "\n--------------------------------------------------------------------------------------\n";
}
void PrintMultiplyTable()
{
	for (int a = 1;a <= 10;a++)
	{
		cout << "  " << a << "\t|   ";
		for (int m = 1;m <= 10;m++)
		{
			cout << m * a<<"\t    ";
		}
		cout << "\n";
	}
	
}
int main()
{ 
	HeadofTable();
	PrintMultiplyTable();

	return 0;
}
-----------------------------------------------------------------------------------------------------------
~~Check perfect number~~
int ReadNumber(string message)
{
	int number;
	do
	{
		cout << message;
		cin >> number;
	} while (number <= 0);

	return number;
}
int CheckPerfectNumber(int number)
{
	int sum = 0;
	for (int i = 1;i < number;i++)
	{
		if (number % i == 0)
		
			sum += i;
		
	}
	return sum;
}
void PrintResult(int number)
{
	if (CheckPerfectNumber(number)==number)
	{
		cout << "\nPerfect Number";
	}
	else
	{
		cout << "\nNot perfect";
	}
}
int main()
{
	int number = ReadNumber("Enter positive number :");
	PrintResult(number);

	return 0;
}
-------------------------------------------------------------------------------------------------------
~~Print perfect numbers from 1 to N~~
int ReadNumber(string message)
{
	int number;
	do
	{
		cout << message;
		cin >> number;
	} while (number <= 0);

	return number;
}
bool CheckPerfectNumber(int number)
{
	int sum = 0;
	for (int i = 1;i < number;i++)
	{
		if (number % i == 0)
		
			sum += i;
		
	}
	return sum==number;
}
void PrintResult(int number)
{
	for (int i = 1;i <= number;i++)
	{
		if (CheckPerfectNumber(i))
			cout << i << endl;
	}
}
int main()
{
	int number = ReadNumber("Enter positive number :");
	PrintResult(number);

	return 0;
}
--------------------------------------------------------------------------------------------------------
~~Print digits in reversed order~~
int ReadNumber(string message)
{
	int number;
	do
	{
		cout << message;
		cin >> number;
	} while (number <= 0);

	return number;
}

void PrintResult(int number)
{
	int remainder = 0;
		while (number > 0)
		{
			remainder = number % 10;
			number = number / 10;
			cout << remainder<<endl;
		}
}
int main()
{


	PrintResult(ReadNumber("enter number :"));

	return 0;
}
----------------------------------------------------------------------------------------------------
~~sum of digits of number~~
int ReadNumber(string message)
{
	int number;
	do
	{
		cout << message;
		cin >> number;
	} while (number <= 0);

	return number;
}

int SumDigitOfNumber(int number)
{
	int remainder = 0,sum=0;
		while (number > 0)
		{
			remainder = number % 10;
			number = number / 10;
			sum += remainder;
		}
		return sum;
}
int main()
{
	cout << "\nsum of digits :" << PrintResult(ReadNumber("enter positive number :"));


	return 0;
}
--------------------------------------------------------------------------------------------------------
~~ Reversed Number ~~
int ReadNumber(string message)
{
	int number;
	do
	{
		cout << message;
		cin >> number;
	} while (number <= 0);

	return number;
}

int ReverseNumber(int number)
{
	int remainder = 0;
	int reverse=0;
	while (number > 0)
	{
		remainder = number % 10;
		number = number / 10;
		reverse =reverse*10+ remainder;
	}
	return reverse;
}
int main()
{


	cout<<"\nReverse is : "<<ReverseNumber(ReadNumber("enter positive number :"))<<endl;

	return 0;
}
------------------------------------------------------------------------------------------------------------
~~Check Freaquancy of Digit of Number~~
int ReadNumber(string message)
{
	int number;
	do
	{
		cout << message;
		cin >> number;
	} while (number <= 0);

	return number;
}
int CheckDigitFrequancy(int number,int digit)
{
	int remainder = 0;
	int frequancy=0;
	while (number > 0)
	{
		remainder = number % 10;
		number = number / 10;
		if (remainder == digit)
			frequancy++;

	}
	return frequancy;
}
int main()
{
	int number = ReadNumber("enter positive number : ");
	int digit = ReadNumber("Enter Digit :");
	cout<<"\nFrequance of "<<digit<<" = "<< CheckDigitFrequancy(number,digit)<<endl;

	return 0;
}
---------------------------------------------------------------------------------------------------
~~Freaquancy of all Digits of Number~~
int ReadNumber(string message)
{
	int number;
	do
	{
		cout << message;
		cin >> number;
	} while (number <= 0);

	return number;
}
int CountDigitFrequancy(int number,int digit)
{
	int remainder = 0;
	int frequancy=0;
	while (number > 0)
	{
		remainder = number % 10;
		number = number / 10;
		if (remainder == digit)
			frequancy++;

	}
	return frequancy;
}
void PrintFrequancyOfDigit(int number)
{
	for (int i = 0;i < 10;i++)
	{
		int freq = 0;
		freq=CountDigitFrequancy(number, i);
		if (freq > 0)
		{
			cout << "Frequancy of " << i << " = " << freq<<endl;
		}
	}
	
}
int main()
{
	PrintResult(ReadNumber("Enter Positive Number :"));

	return 0;
}
------------------------------------------------------------------------------------------------
~~Print Number in Order From Left To Right~~
int ReadNumber(string message)
{
	int number;
	do
	{
		cout << message;
		cin >> number;
	} while (number <= 0);

	return number;
}
int ReverseNumber(int number)
{
	int remainder = 0;
	int reverse = 0;
	while (number > 0)
	{
		remainder = number % 10;
		number = number / 10;
		reverse = reverse * 10 + remainder;
	}
	return reverse;
}
void PrintNumberInOrder(int number)
{
	int remainder = 0;
	while (number > 0)
	{
		remainder = number % 10;
		number = number / 10;
		cout << remainder << endl;
	}
}
int main()
{
	PrintNumberInOrder(ReverseNumber(ReadNumber("Enter Positive Number :")));

	return 0;
}
--------------------------------------------------------------------------------------------------------
~~Is Number Palindrome?~~
int ReadNumber(string message)
{
	int number;
	do
	{
		cout << message;
		cin >> number;
	} while (number <= 0);

	return number;
}
int ReverseNumber(int number)
{
	int remainder = 0;
	int reverse = 0;
	while (number > 0)
	{
		remainder = number % 10;
		number = number / 10;
		reverse = reverse * 10 + remainder;
	}
	return reverse;
}
void IsNumberPalindrome(int number,int reverse)
{
	if (number == reverse)
		cout << "The Number is Palindrome " << endl;
	else
		cout << "The Number is not Palindrome " << endl;
	
}
int main()
{
	int number = ReadNumber("Enter Positive Number : ");
	int reverse = ReverseNumber(number);
	IsNumberPalindrome(number,reverse);

	return 0;
}
----------------------------------------------------------------------------------------------------
~~Print Inverted Pattern~~
int ReadNumber(string message)
{
	int number;
	do
	{
		cout << message;
		cin >> number;
	} while (number <= 0);

	return number;
}
void InvertedPattern(int number)
{
	for (int i = number;i > 0;i--)
	{
		cout << "\n";
		for (int j = 1;j <= i;j++)
		{
			cout << i;
		}

	}
}
int main()
{
	InvertedPattern(ReadNumber("Enter Positive Number : "));

	return 0;
}
-------------------------------------------------------------------------------------------
~~Print Inverted Letter Pattern~~
int ReadNumber(string message)
{
	int number;
	do
	{
		cout << message;
		cin >> number;
	} while (number <= 0);

	return number;
}
void InvertedPattern(int number)
{

	for (int i = 65 + number;i >= 65;i--)
	{
		cout << "\n";
		for (int j = i;j >=65 ;j--)
		{
			cout << char(i);
		}

	}
}
int main()
{
	InvertedPattern(ReadNumber("Enter Positive Number : "));

	return 0;
}
---------------------------------------------------------------------------------------------
~~Print Letter Pattern~~
int ReadNumber(string message)
{
	int number;
	do
	{
		cout << message;
		cin >> number;
	} while (number <= 0);

	return number;
}
void LetterPattern(int number)
{

	for (int i = 65;i <= 64+number;i++)
	{
		cout << "\n";
		for (int j = i;j >=65 ;j--)
		{
			cout << char(i);
		}

	}
}
int main()
{
	LetterPattern(ReadNumber("Enter Positive Number : "));

	return 0;
}
---------------------------------------------------------------------------------------------------
~~Print from AAA to ZZZ~~
void AAATOZZZ()
{

	for (int i = 65;i <= 90;i++)
	{
		cout << "\n";
		for (int j = 65;j <=90 ;j++)
		{
			for (int k = 65;k <= 90;k++)
			{
				cout << char(i) << char(j) << char(k) << endl;
			}
		}

	}
}
int main()
{
	AAATOZZZ();

	return 0;
}
-----------------------------------------------------------------------------------------------------
~~Guess a 3-Letter Password (Capital)~~
string ReadPassword(string message)
{
	string password;
	cout << message;
	cin >> password;
	return password;
}
bool AAATOZZZ(string password)
{
	string word="";
	int counter = 0;
	for (int i = 65;i <= 90;i++)
	{
		cout << "\n";
		for (int j = 65;j <=90 ;j++)
		{
			for (int k = 65;k <= 90;k++)
			{
				counter++;
				word = word + char(i);
				word = word + char(j);
				word = word + char(k);
				if (word == password)
				{
					cout << "Password is " << word << " found after " << counter << " trial(s)\n";
					return true;
				}
				word = "";
			}
		}

	}
}
int main()
{
	AAATOZZZ(ReadPassword("enter Password : "));

	return 0;
}
-----------------------------------------------------------------------------------------------------
~~Encryption & Decreption of Text~~
string ReadText(string message)
{
	string text;
	cout << message;
	cin >> text;
	return text;
}
string Encryption(string text, int EncryptKey)
{
	for (int i = 0;i <= text.length();i++)
	{
		text[i] = char(text[i] + EncryptKey);;
	}
	return text;
}
string Decryption(string text, int EncryptKey)
{
	for (int i = 0;i <=text.length();i++)
	{
		text[i] = char(text[i] - EncryptKey);;
	}
	return text;
}
int main()
{
	const int EncryptKey = 2;
	
	string text = ReadText("Enter Text : ");
	cout << "\nText Before Encryption : " << text << endl;
	cout << "Text After Encryption : " << Encryption(text, EncryptKey) << endl;
	cout << "Text After Decryption : " << Decryption(Encryption(text, EncryptKey), EncryptKey) << endl;

	return 0;
}
------------------------------------------------------------------------------------------------------------
~~Random Numbers in Range~~
int RandomNumber(int From, int To)
{
	int random=rand() % (To - From + 1) + From;
	return random;
}
int main()
{
	srand((unsigned)time(NULL));
	cout << RandomNumber(10, 20) << endl;
	cout << RandomNumber(1, 5);

	return 0;
}
--------------------------------------------------------------------------------------------------------------
~~Print Random Characters~~
enum enRandomCharacter{SmallCharacter=1,CapitalCharacter=2,SpecialLetter=3,Digit=4};
char RandomNumber(int From, int To)
{
	int random=rand() % (To - From + 1) + From;
	return random;
}
char GetRandomCharacter(enRandomCharacter RandomCharacter)
{
	switch (RandomCharacter)
	{
	case enRandomCharacter::SmallCharacter:
		return char(RandomNumber(96, 121));
	case enRandomCharacter::CapitalCharacter:
		return char(RandomNumber(65, 90));
	case enRandomCharacter::SpecialLetter:
		return char(RandomNumber(33, 47));
	case enRandomCharacter::Digit:
		return char(RandomNumber(48, 57));
	}
}
int main()
{
	srand((unsigned)time(NULL));
	cout << GetRandomCharacter(enRandomCharacter::SmallCharacter) << endl;
	cout << GetRandomCharacter(enRandomCharacter::CapitalCharacter) << endl;
	cout << GetRandomCharacter(enRandomCharacter::SpecialLetter) << endl;
	cout << GetRandomCharacter(enRandomCharacter::Digit) << endl;

	return 0;
}
-----------------------------------------------------------------------------------------------------
~~Generate Number of keys~~
int ReadNumber(string message)
{
	int number;
	do
	{
		cout << message;
		cin >> number;
	} while (number <= 0);

	return number;
}
enum enRandomCharacter { SmallCharacter = 1, CapitalCharacter = 2, SpecialLetter = 3, Digit = 4 };
char RandomNumber(int From, int To)
{
	int random = rand() % (To - From + 1) + From;
	return random;
}
char GetRandomCharacter(enRandomCharacter RandomCharacter)
{
	switch (RandomCharacter)
	{
	case enRandomCharacter::SmallCharacter:
		return char(RandomNumber(96, 121));
	case enRandomCharacter::CapitalCharacter:
		return char(RandomNumber(65, 90));
	case enRandomCharacter::SpecialLetter:
		return char(RandomNumber(33, 47));
	case enRandomCharacter::Digit:
		return char(RandomNumber(48, 57));
	}
}
string GenerateWord(enRandomCharacter charactertype,int length)
{
	string word = "";
	for (int i = 1;i <= length;i++)
	{
		word = word+GetRandomCharacter(charactertype);
	}
	return word;
}
string GenerateKey()
{
	string key="";
	key = GenerateWord(enRandomCharacter::CapitalCharacter, 4) + "-" +
		  GenerateWord(enRandomCharacter::CapitalCharacter, 4) + "-" +
		  GenerateWord(enRandomCharacter::CapitalCharacter, 4) + "-" +
		  GenerateWord(enRandomCharacter::CapitalCharacter, 4);
	return key;
}
void NumberOfKeys(int number)
{
	for (int i = 1;i <= number;i++)
	{
		cout << "Key [" << i << "] = " << GenerateKey() << endl;
	}
}
int main()
{
	srand((unsigned)time(NULL));
	NumberOfKeys(ReadNumber("Enter number of keys : "));

	return 0;
}
---------------------------------------------------------------------------------------------------------
~~Repeated Elements Count In Array~~
int ReadNumber(string message)
{
	int number;
	do
	{
		cout << message;
		cin >> number;
	} while (number <= 0);

	return number;
}
void ReadArray(int arr[100],int &arrlength)
{
	for (int i = 0;i <= arrlength - 1;i++)
	{
		cout << "Element [" << i + 1 << "] = ";
		cin >> arr[i];
	}
	cout << "\n";
}
void PrintArray(int arr[100],int arrlength)
{
	for (int i = 0;i <= arrlength - 1;i++)
	{
		cout << arr[i] << " ";
	}
	cout << "\n";
}
int RepeatedTimesInArray(int arr[100], int arrlength, int digit)
{
	int counter = 0;
	for (int i = 0;i <= arrlength - 1; i++)
	{
		if (arr[i] == digit)
			counter++;
	}
	return counter;
}
int main()
{
	int arr[100], arrlength, digit;
	cout << "Enter number of elements :";
	cin >> arrlength;
	cout << "\nEnter Elements :\n";
	ReadArray(arr, arrlength);
	cout << "Original Array :\n";
	PrintArray(arr, arrlength);
	int number = ReadNumber("Enter Digit to Check Frequancy :");
	cout << "\nNumber :" << number<<" is repeated "<<
	RepeatedTimes(arr, arrlength,number)<<" times";


	return 0;
}
---------------------------------------------------------------------------------------------------------
~~Fill Array With Random Numbers From 1 to 100~~
char RandomNumber(int From, int To)
{
	int random = rand() % (To - From + 1) + From;
	return random;
}
void FillArrayWithRandomNumbers(int arr[100],int &arrlength)
{
	cout << "Enter Number of Elements To Fill :";
	cin >> arrlength;
	for (int i = 0;i <= arrlength - 1;i++)
	{
		arr[i]=RandomNumber(1,100);
	}
	cout << "\n";
}
void PrintArray(int arr[100],int arrlength)
{
	for (int i = 0;i <= arrlength - 1;i++)
	{
		cout << arr[i] << " ";
	}
	cout << "\n";
}

int main()
{
	int arr[100], arrlength;
	srand((unsigned)time(NULL));

	FillArrayWithRandomNumbers(arr, arrlength);
	cout << "\nArray Elements = ";
	PrintArray(arr, arrlength);


	return 0;
}
----------------------------------------------------------------------------------------------------
~~Fill Array With Random Numbers From 1 to 100 and Print Max Number In Array ~~
char RandomNumber(int From, int To)
{
	int random = rand() % (To - From + 1) + From;
	return random;
}
void FillArrayWithRandomNumbers(int arr[100],int &arrlength)
{
	cout << "Enter Number of Elements To Fill :";
	cin >> arrlength;
	for (int i = 0;i <= arrlength - 1;i++)
	{
		arr[i]=RandomNumber(1,100);
	}
	cout << "\n";
}
void PrintArray(int arr[100],int arrlength)
{
	for (int i = 0;i <= arrlength - 1;i++)
	{
		cout << arr[i] << " ";
	}
	cout << "\n";
}
int MaxNumberInArray(int arr[100], int arrlength)
{
	cout << "\nMax Number = ";
	int MaxNumber = 0;
	for (int i = 0;i < arrlength;i++)
	{
		
		if (arr[i] > MaxNumber)
		{
			MaxNumber = arr[i];
		}
		
	}
	return MaxNumber;
}
int main()
{
	int arr[100], arrlength;
	srand((unsigned)time(NULL));

	FillArrayWithRandomNumbers(arr, arrlength);
	cout << "\nArray Elements = ";
	PrintArray(arr, arrlength);
	cout<<MaxNumberInArray(arr, arrlength);


	return 0;
}
-------------------------------------------------------------------------------------------------------
~~Fill Array With Random Numbers From 1 to 100 and Print Minimum Number In Array~~
char RandomNumber(int From, int To)
{
	int random = rand() % (To - From + 1) + From;
	return random;
}
void FillArrayWithRandomNumbers(int arr[100],int &arrlength)
{
	cout << "Enter Number of Elements To Fill :";
	cin >> arrlength;
	for (int i = 0;i <= arrlength - 1;i++)
	{
		arr[i]=RandomNumber(1,100);
	}
	cout << "\n";
}
void PrintArray(int arr[100],int arrlength)
{
	for (int i = 0;i <= arrlength - 1;i++)
	{
		cout << arr[i] << " ";
	}
	cout << "\n";
}
int MinNumberInArray(int arr[100], int arrlength)
{
	cout << "\nMinimum Number = ";
	int MinNumber = arr[0];
	for (int i = 0;i < arrlength;i++)
	{
		
		if (arr[i] < MinNumber)
		{
			MinNumber = arr[i];
		}
		
	}
	return MinNumber;
}
int main()
{
	int arr[100], arrlength;
	srand((unsigned)time(NULL));

	FillArrayWithRandomNumbers(arr, arrlength);
	cout << "\nArray Elements = ";
	PrintArray(arr, arrlength);
	cout<<MinNumberInArray(arr, arrlength);


	return 0;
}
----------------------------------------------------------------------------------------------------
~~Fill Array With Random Numbers From 1 to 100 and Print Sum of Elements In Array~~
char RandomNumber(int From, int To)
{
	int random = rand() % (To - From + 1) + From;
	return random;
}
void FillArrayWithRandomNumbers(int arr[100],int &arrlength)
{
	cout << "Enter Number of Elements To Fill :";
	cin >> arrlength;
	for (int i = 0;i <= arrlength - 1;i++)
	{
		arr[i]=RandomNumber(1,100);
	}
	cout << "\n";
}
void PrintArray(int arr[100],int arrlength)
{
	for (int i = 0;i <= arrlength - 1;i++)
	{
		cout << arr[i] << " ";
	}
	cout << "\n";
}
int SumOfArrayElements(int arr[100], int arrlength)
{
	cout << "\nSum of Elements = ";
	int Sum = 0;
	for (int i = 0;i < arrlength;i++)
	{
		Sum += arr[i];
	}
	return Sum;
}
int main()
{
	int arr[100], arrlength;
	srand((unsigned)time(NULL));

	FillArrayWithRandomNumbers(arr, arrlength);
	cout << "\nArray Elements = ";
	PrintArray(arr, arrlength);
	cout<< SumOfArrayElements(arr, arrlength)<<"\n";


	return 0;
}
--------------------------------------------------------------------------------------------------------------------
~~~~Fill Array With Random Numbers From 1 to 100 and Print aVerage of Array~~~~
char RandomNumber(int From, int To)
{
	int random = rand() % (To - From + 1) + From;
	return random;
}
void FillArrayWithRandomNumbers(int arr[100],int &arrlength)
{
	cout << "Enter Number of Elements To Fill :";
	cin >> arrlength;
	for (int i = 0;i <= arrlength - 1;i++)
	{
		arr[i]=RandomNumber(1,100);
	}
	cout << "\n";
}
void PrintArray(int arr[100],int arrlength)
{
	for (int i = 0;i <= arrlength - 1;i++)
	{
		cout << arr[i] << " ";
	}
	cout << "\n";
}
int SumOfArrayElements(int arr[100], int arrlength)
{
	int Sum = 0;
	for (int i = 0;i < arrlength;i++)
	{
		Sum += arr[i];
	}
	return Sum;
}
float ArrayAverage(int arr[100],int arrlength)
{
	return (float)SumOfArrayElements(arr,arrlength) / arrlength;
}
int main()
{
	int arr[100], arrlength;
	srand((unsigned)time(NULL));

	FillArrayWithRandomNumbers(arr, arrlength);
	cout << "\nArray Elements = ";
	PrintArray(arr, arrlength);
	cout << "\nSum of Elements = ";
	cout<< SumOfArrayElements(arr, arrlength)<<"\n";
	cout << "\nArray Average = " << ArrayAverage(arr, arrlength) << "\n";


	return 0;
}
------------------------------------------------------------------------------------------------------------
~~Fill Array With Random Numbers From 1 to 100 and Copy this Array ~~
char RandomNumber(int From, int To)
{
	int random = rand() % (To - From + 1) + From;
	return random;
}
void FillArrayWithRandomNumbers(int arr[100],int &arrlength)
{
	cout << "Enter Number of Elements To Fill :";
	cin >> arrlength;
	for (int i = 0;i <= arrlength - 1;i++)
	{
		arr[i]=RandomNumber(1,100);
	}
	cout << "\n";
}
void PrintArray(int arr[100],int arrlength)
{
	for (int i = 0;i <= arrlength - 1;i++)
	{
		cout << arr[i] << " ";
	}
	cout << "\n";
}
void CopyArray(int arr[100], int arr2[100],int arrlength)
{
	for (int i = 0;i < arrlength;i++)
	{
		arr2[i] = arr[i];
	}
}
int main()
{
	int arr[100], arrlength,arr2[100];
	srand((unsigned)time(NULL));

	FillArrayWithRandomNumbers(arr, arrlength);
	cout << "\nArray 1 Elements = ";
	PrintArray(arr, arrlength);
	CopyArray(arr, arr2, arrlength);
	cout << "\nArray 2 Elements After Copy = ";
	PrintArray(arr2, arrlength);

	return 0;
}
----------------------------------------------------------------------------------------------------------
~~Fill Array With Random Numbers From 1 to 100 and Print Prime Numbers of Array in another Array ~~
enum enCheckPrime { Prime = 1, NotPrime = 2 };
char RandomNumber(int From, int To)
{
	int random = rand() % (To - From + 1) + From;
	return random;
}
void FillArrayWithRandomNumbers(int arr[100],int &arrlength)
{
	cout << "Enter Number of Elements To Fill :";
	cin >> arrlength;
	for (int i = 0;i <= arrlength - 1;i++)
	{
		arr[i]=RandomNumber(1,100);
	}
	cout << "\n";
}
void PrintArray(int arr[100],int arraylength)
{
	for (int i = 0;i <= arraylength - 1;i++)
	{
		cout << arr[i] << " ";
	}
	cout << "\n";
}
enCheckPrime CheckPrimeNumber(int number)
{
	int M = number / 2;
	for (int i = 2; i < M; i++)
	{
		if (number % i == 0)
			return enCheckPrime::NotPrime;
	}
	return enCheckPrime::Prime;
}
void CopyPrimeArray(int arr[100], int arr2[100],int arrlength, int &arr2length)
{
	int counter = 0;
	for (int i = 0;i < arrlength;i++)
	{
		if (CheckPrimeNumber(arr[i]) == enCheckPrime::Prime)
		{
			arr2[counter] = arr[i];
			counter++;
		}
	}
	arr2length = --counter;
}
int main()
{
	int arr[100], arrlength=0,arr2[100], arr2length=0;
	srand((unsigned)time(NULL));

	FillArrayWithRandomNumbers(arr, arrlength);
	cout << "\nArray 1 Elements = ";
	PrintArray(arr, arrlength);
	CopyPrimeArray(arr, arr2, arrlength,arr2length);
	cout << "\nPrime Numbers of Array = ";
	PrintArray(arr2, arr2length);

	return 0;
}
------------------------------------------------------------------------------------------------------
~~Fill 2 Arays with Random Numbers and Print Sum of 2 Arrays in Another Array~~
float ReadPositiveNumber(string Message)
{
	int number;
	do
	{
		cout << Message;
		cin >> number;
	} while (number <= 0);

	return number;
}
char RandomNumber(int From, int To)
{
	int random = rand() % (To - From + 1) + From;
	return random;
}
void FillArrayWithRandomNumbers(int arr[100],int &arrlength)
{
	for (int i = 0;i <= arrlength - 1;i++)
	{
		arr[i]=RandomNumber(1,100);
	}
	cout << "\n";
}
void PrintArray(int arr[100],int arraylength)
{
	for (int i = 0;i <= arraylength - 1;i++)
	{
		cout << arr[i] << " ";
	}
	cout << "\n";
}
void SumOf2ArrayInTherdArray(int arr[100], int arr2[100],int arrlength, int arrsum[100])
{
	for (int i = 0;i < arrlength;i++)
	{
		arrsum[i] = arr[i] + arr2[i];
	}
}
int main()
{
	int arr[100], arrlength=0,arr2[100], arrsum[100];
	srand((unsigned)time(NULL));

    arrlength=ReadPositiveNumber("Enter How Many Elements : ");
	
	FillArrayWithRandomNumbers(arr, arrlength);
	cout << "\nArray 1 Elements = ";
	PrintArray(arr, arrlength);

	FillArrayWithRandomNumbers(arr2, arrlength);
	cout << "Array 2 Elements = ";
	PrintArray(arr2, arrlength);

	SumOf2ArrayInTherdArray(arr, arr2, arrlength,arrsum);
	cout << "\nSum of 2 Arrays Elements = ";
	PrintArray(arrsum, arrlength);

	return 0;
}
------------------------------------------------------------------------------------------------------
~~Fill Array in Order From 1 To 10 and Shuffle Array and Print Array Before&After Shuffle~~
float ReadPositiveNumber(string Message)
{
	int number;
	do
	{
		cout << Message;
		cin >> number;
	} while (number <= 0);

	return number;
}
void Swap(int &A, int &B)
{
	int temp = A;
	A = B;
	B = temp;
}
char RandomNumber(int From, int To)
{
	int random = rand() % (To - From + 1) + From;
	return random;
}
void FillArrayWithOrderedNumbers(int arr[100],int &arrlength)
{
	for (int i = 0;i <= arrlength-1 ;i++)
	{
		arr[i]=i+1;
	}
	cout << "\n";
}
void ShuffleArray(int arr[100], int arrlength)
{

	for (int i = 0; i < arrlength; i++)
	{
		Swap(arr[RandomNumber(1, arrlength)-1], arr[RandomNumber(1, arrlength)-1]);
	}
}
void PrintArray(int arr[100],int arraylength)
{
	for (int i = 0;i <= arraylength - 1;i++)
	{
		cout << arr[i] << " ";
	}
	cout << "\n";
}
int main()
{
	int arr[100], arrlength = 0;
	srand((unsigned)time(NULL));

    arrlength=ReadPositiveNumber("Enter How Many Elements : ");
	
	FillArrayWithOrderedNumbers(arr, arrlength);
	cout << "\nArray Elements : ";
	PrintArray(arr, arrlength);

	ShuffleArray(arr,arrlength);
	cout << "\nArray after Shuffle : ";
	PrintArray(arr, arrlength);

	return 0;
}
-------------------------------------------------------------------------------------------------------------
~~Fill Array with Random Numbers and Reverse it and Print Array and Reverse~~
float ReadPositiveNumber(string Message)
{
	int number;
	do
	{
		cout << Message;
		cin >> number;
	} while (number <= 0);

	return number;
}
void Swap(int &A, int &B)
{
	int temp = A;
	A = B;
	B = temp;
}
char RandomNumber(int From, int To)
{
	int random = rand() % (To - From + 1) + From;
	return random;
}
void FillArrayWithRandomNumbers(int arr[100], int& arrlength)
{
	for (int i = 0; i <= arrlength - 1; i++)
	{
		arr[i] = RandomNumber(1, 100);
	}
	cout << "\n";
}
void ReverseArray(int arr[100], int arrlength)
{

	for (int i = 0; i <= arrlength/2 -1; i++)
	{

		swap(arr[i],arr[arrlength-1-i]);

	}
}
void PrintArray(int arr[100],int arraylength)
{
	for (int i = 0;i <= arraylength - 1;i++)
	{
		cout << arr[i] << " ";
	}
	cout << "\n";
}
int main()
{
	int arr[100], arrlength = 0;
	srand((unsigned)time(NULL));

    arrlength=ReadPositiveNumber("Enter How Many Elements : ");
	
	FillArrayWithRandomNumbers(arr, arrlength);
	cout << "\nArray Elements : ";
	PrintArray(arr, arrlength);

	ReverseArray(arr,arrlength);
	cout << "\nArray after Reverse : ";
	PrintArray(arr, arrlength);

	return 0;
}
--------------------------------------------------------------------------------------------------
~~Fill Array With Random Keys And Print Keys~~
int ReadNumber(string message)
{
	int number;
	do
	{
		cout << message;
		cin >> number;
	} while (number <= 0);

	return number;
}
enum enRandomCharacter { SmallCharacter = 1, CapitalCharacter = 2, SpecialLetter = 3, Digit = 4 };
char RandomNumber(int From, int To)
{
	int random = rand() % (To - From + 1) + From;
	return random;
}
char GetRandomCharacter(enRandomCharacter RandomCharacter)
{
	switch (RandomCharacter)
	{
	case enRandomCharacter::SmallCharacter:
		return char(RandomNumber(96, 121));
	case enRandomCharacter::CapitalCharacter:
		return char(RandomNumber(65, 90));
	case enRandomCharacter::SpecialLetter:
		return char(RandomNumber(33, 47));
	case enRandomCharacter::Digit:
		return char(RandomNumber(48, 57));
	}
}
string GenerateWord(enRandomCharacter charactertype, int length)
{
	string word = "";
	for (int i = 1; i <= length; i++)
	{
		word = word + GetRandomCharacter(charactertype);
	}
	return word;
}
string GenerateKey()
{
	string key = "";
	key = GenerateWord(enRandomCharacter::CapitalCharacter, 4) + "-" +
		  GenerateWord(enRandomCharacter::CapitalCharacter, 4) + "-" +
		  GenerateWord(enRandomCharacter::CapitalCharacter, 4) + "-" +
		  GenerateWord(enRandomCharacter::CapitalCharacter, 4);
	return key;
}
void FillArrayWithKeys(string arr[100], int number)
{
	for (int i = 0; i < number; i++)
	{
		arr[i] = GenerateKey();
	}
}
void PrintStringArray(string arr[100], int arraylength)
{
	for (int i = 0; i < arraylength ; i++)
	{
		cout <<"\nArray ["<<i<<"] : "<< arr[i];
	}
	cout << "\n";
}
int main()
{
	string arr[100];
	srand((unsigned)time(NULL));

	int arrlength = ReadNumber("Enter number of keys : ");
	FillArrayWithKeys(arr, arrlength);
	PrintStringArray(arr, arrlength);

	return 0;
}
------------------------------------------------------------------------------------------------
~~Fill Array With Random Numbers And Search for a number in Array~~
float ReadPositiveNumber(string Message)
{
	int number;
	do
	{
		cout << Message;
		cin >> number;
	} while (number <= 0);

	return number;
}
char RandomNumber(int From, int To)
{
	int random = rand() % (To - From + 1) + From;
	return random;
}
void FillArrayWithRandomNumbers(int arr[100], int& arrlength)
{
	for (int i = 0; i <= arrlength - 1; i++)
	{
		arr[i] = RandomNumber(1, 100);
	}
	cout << "\n";
}
int SearchForNumberInArray(int arr[100], int arrlength,int number)
{
	for (int i = 0; i < arrlength; i++)
	{
		if (arr[i] == number)
			return i;
	}
	return -1;
}
void PrintArray(int arr[100], int arraylength)
{
	for (int i = 0; i <= arraylength - 1; i++)
	{
		cout << arr[i] << " ";
	}
	cout << "\n";
}
int main()
{
	int arr[100], arrlength = 0;
	srand((unsigned)time(NULL));

	arrlength = ReadPositiveNumber("Enter How Many Elements : ");

	FillArrayWithRandomNumbers(arr, arrlength);
	cout << "\nArray Elements : ";
	PrintArray(arr, arrlength);

	int Number=ReadPositiveNumber("\nEnter Number to search for :");
	cout << "\nThe Number you are looking for is : " << Number << endl;
	if (SearchForNumberInArray(arr, arrlength, Number) == -1)
	{
		cout << "The Number is not found \n";
	}
	else
	{
		cout << "\nPosition Of The Number = " << SearchForNumberInArray(arr, arrlength, Number) << endl;
		cout << "The Number Found its Order : " << SearchForNumberInArray(arr, arrlength, Number) + 1 << endl;
	}


	return 0;
}
-----------------------------------------------------------------------------------------------------------
~~Fill Array With Random Numbers And Check if the number in Array~~
float ReadPositiveNumber(string Message)
{
	int number;
	do
	{
		cout << Message;
		cin >> number;
	} while (number <= 0);

	return number;
}
char RandomNumber(int From, int To)
{
	int random = rand() % (To - From + 1) + From;
	return random;
}
void FillArrayWithRandomNumbers(int arr[100], int& arrlength)
{
	for (int i = 0; i <= arrlength - 1; i++)
	{
		arr[i] = RandomNumber(1, 100);
	}
	cout << "\n";
}
int SearchForNumberInArray(int arr[100], int arrlength,int number)
{
	for (int i = 0; i < arrlength; i++)
	{
		if (arr[i] == number)
			return i;
	}
	return -1;
}
bool IsNumberInArray(int arr[100], int arrlength, int number)
{
	return SearchForNumberInArray(arr, arrlength, number) != -1;
}
void PrintArray(int arr[100], int arraylength)
{
	for (int i = 0; i <= arraylength - 1; i++)
	{
		cout << arr[i] << " ";
	}
	cout << "\n";
}
int main()
{
	int arr[100], arrlength = 0;
	srand((unsigned)time(NULL));

	arrlength = ReadPositiveNumber("Enter How Many Elements : ");

	FillArrayWithRandomNumbers(arr, arrlength);
	cout << "\nArray Elements : ";
	PrintArray(arr, arrlength);

	int Number=ReadPositiveNumber("\nEnter Number to search for :");
	cout << "\nThe Number you are looking for is : " << Number << endl;
	if (IsNumberInArray(arr, arrlength, Number))
	{
		cout << "Yes,The Number is Found :-)\n";
	}
	else
	{
		cout << "No,The Number is Not Found :-(\n";
	}


	return 0;
}
----------------------------------------------------------------------------------------------------------
~~Add Array Elements Simi Dynamic~~
float ReadNumber()
{
	int number;
	cout << "Please Enter Number : ";
	cin >> number;

	return number;
}
void AddArrayElement(int arr[100], int &arrlength, int Number)
{
	arr[arrlength] = Number;
	arrlength++;
}
void InputUserNumbersInArray(int arr[100],int &arrlength)
{
	bool AddMore = 0;
	do
	{
		AddArrayElement(arr, arrlength, ReadNumber());
		cout << "Do You Want To Add Number ? [0]:No , [1]:Yes .\n";
		cin >> AddMore;
	} while (AddMore);
}
void PrintArray(int arr[100], int arraylength)
{
	for (int i = 0; i <= arraylength - 1; i++)
	{
		cout << arr[i] << " ";
	}
	cout << "\n";
}
int main()
{
	int arr[100],arrlength=0;

	InputUserNumbersInArray(arr, arrlength);
	cout << "Array Length : " << arrlength << endl;
	cout << "Array Elements : ";
	PrintArray(arr, arrlength);

	return 0;
}
-------------------------------------------------------------------------------------------------------------
~~Copy Array Elements~~
float ReadPositiveNumber(string Message)
{
	int number;
	do
	{
		cout << Message;
		cin >> number;
	} while (number <= 0);

	return number;
}
char RandomNumber(int From, int To)
{
	int random = rand() % (To - From + 1) + From;
	return random;
}
void FillArrayWithRandomNumbers(int arr[100], int& arrlength)
{
	for (int i = 0; i <= arrlength - 1; i++)
	{
		arr[i] = RandomNumber(1, 100);
	}
	cout << "\n";
}
void AddArrayElement(int arr[100], int &arrlength, int Number)
{
	arrlength++;
	arr[arrlength-1] = Number;
}
void CopyArrayUsingAddArrayElement(int arr[100], int arr2[100], int &arr2length, int arrlength)
{
	for (int i = 0; i < arrlength; i++)
	{
		AddArrayElement(arr2, arr2length, arr[i]);
	}
}
void PrintArray(int arr[100], int arraylength)
{
	for (int i = 0; i <= arraylength - 1; i++)
	{
		cout << arr[i] << " ";
	}
	cout << "\n";
}
int main()
{
	int arr[100],arr2[100],arr2length=0;
	srand((unsigned)time(NULL));

	int arrlength = ReadPositiveNumber("Enter Number of Elements : ");
	FillArrayWithRandomNumbers(arr, arrlength);
	cout << "Array 1 Elements : ";
	PrintArray(arr, arrlength);

	CopyArrayUsingAddArrayElement(arr, arr2, arr2length, arrlength);
	cout << "\nArray 2 Elements After Copy : ";
	PrintArray(arr2, arr2length);

	return 0;
}
------------------------------------------------------------------------------------------------------
~~Copy Odd Numbers From Array 1 to Array 2~~
float ReadPositiveNumber(string Message)
{
	int number;
	do
	{
		cout << Message;
		cin >> number;
	} while (number <= 0);

	return number;
}
char RandomNumber(int From, int To)
{
	int random = rand() % (To - From + 1) + From;
	return random;
}
void FillArrayWithRandomNumbers(int arr[100], int& arrlength)
{
	for (int i = 0; i <= arrlength - 1; i++)
	{
		arr[i] = RandomNumber(1, 100);
	}
	cout << "\n";
}
void AddArrayElement(int arr[100], int &arrlength, int Number)
{
	arrlength++;
	arr[arrlength-1] = Number;
}
void CopyOddNumbersInArray(int arr[100], int arr2[100], int &arr2length, int arrlength)
{
	for (int i = 0; i < arrlength; i++)
	{
		if(arr[i]%2 !=0)
			AddArrayElement(arr2, arr2length, arr[i]);
	}
}
void PrintArray(int arr[100], int arraylength)
{
	for (int i = 0; i <= arraylength - 1; i++)
	{
		cout << arr[i] << " ";
	}
	cout << "\n";
}
int main()
{
	int arr[100],arr2[100],arr2length=0;
	srand((unsigned)time(NULL));

	int arrlength = ReadPositiveNumber("Enter Number of Elements : ");
	FillArrayWithRandomNumbers(arr, arrlength);
	cout << "Array 1 Elements : ";
	PrintArray(arr, arrlength);

	CopyOddNumbers(arr, arr2, arr2length, arrlength);
	cout << "\nOdd Numbers In Array 2 After Copy : ";
	PrintArray(arr2, arr2length);

	return 0;
}
---------------------------------------------------------------------------------------------------------------
~~~~Copy Prime Numbers From Array 1 to Array 2~~~~
enum enCheckPrime{Prime=1,NotPrime=2};
float ReadPositiveNumber(string Message)
{
	int number;
	do
	{
		cout << Message;
		cin >> number;
	} while (number <= 0);

	return number;
}
char RandomNumber(int From, int To)
{
	int random = rand() % (To - From + 1) + From;
	return random;
}
void FillArrayWithRandomNumbers(int arr[100], int& arrlength)
{
	for (int i = 0; i <= arrlength - 1; i++)
	{
		arr[i] = RandomNumber(1, 100);
	}
	cout << "\n";
}
void AddArrayElement(int arrSource[100], int &arrlength, int Number)
{
	arrlength++;
	arrSource[arrlength-1] = Number;
}
enCheckPrime CheckPrimeNumber(int number)
{
	int M = number / 2;
	for (int i = 2; i < M; i++)
	{
		if (number % i == 0)
			return enCheckPrime::NotPrime;
	}
	return enCheckPrime::Prime;
}
void CopyPrimeNumberInArray(int arrSource[100], int arrDestination[100], int arrlength, int& arrDestinationlength)
{
	for (int i = 0; i < arrlength; i++)
	{
		if (CheckPrimeNumber(arrSource[i]) == enCheckPrime::Prime)
		{
			AddArrayElement(arrDestination, arrDestinationlength, arrSource[i]);
		}
	}
}
void PrintArray(int arr[100], int arraylength)
{
	for (int i = 0; i <= arraylength - 1; i++)
	{
		cout << arr[i] << " ";
	}
	cout << "\n";
}
int main()
{
	int arr[100],arr2[100],arr2length=0;
	srand((unsigned)time(NULL));

	int arrlength = ReadPositiveNumber("Enter Number of Elements : ");
	FillArrayWithRandomNumbers(arr, arrlength);
	cout << "Array 1 Elements : ";
	PrintArray(arr, arrlength);

	CopyPrimeNumber(arr, arr2, arrlength, arr2length);
	cout << "\nPrime Numbers In Array 2 After Copy : ";
	PrintArray(arr2, arr2length);

	return 0;
}
-----------------------------------------------------------------------------------------------------------
~~Copy Destinct Numbers From Array 1 to Array 2~~
int SearchForNumberInArray(int arrSource[100], int arrlength, int number)
{
	for (int i = 0; i < arrlength; i++)
	{
		if (arrSource[i] == number)
			return i;
	}
	return -1;
}

bool IsNumberInArray(int arrSource[100], int arrlength, int number)
{
	return SearchForNumberInArray(arrSource, arrlength, number) != -1;
}

void FillArrayWithDistinctNumbers(int arr[100], int& arrlength)
{
	arrlength = 10;
	arr[0] = 10;
	arr[1] = 10;
	arr[2] = 10;
	arr[3] = 50;
	arr[4] = 50; 
	arr[5] = 70;
	arr[6] = 70;
	arr[7] = 70;
	arr[8] = 70;
	arr[9] = 90;
	cout << "\n";
}

void AddArrayElement(int arrSource[100], int &arrlength, int Number)
{
	arrlength++;
	arrSource[arrlength-1] = Number;
}

void CopyDistinctNumber(int arrSource[100], int arrDestination[100], int arrlength, int& arrDestinationlength)
{
	for (int i = 0; i < arrlength; i++)
	{
		if(!IsNumberInArray(arrDestination,arrDestinationlength,arrSource[i]))
			AddArrayElement(arrDestination, arrDestinationlength, arrSource[i]);
	          
	}
}

void PrintArray(int arr[100], int arraylength)
{
	for (int i = 0; i <= arraylength - 1; i++)
	{
		cout << arr[i] << " ";
	}
	cout << "\n";
}

int main()
{
	int arr[100], arrlength,arr2[100],arr2length=0;

	FillArrayWithDistinctNumbers(arr, arrlength);
	cout << "Array 1 Elements : ";
	PrintArray(arr, arrlength);

	CopyDistinctNumber(arr, arr2, arrlength, arr2length);
	cout << "\nDistinct Numbers In Array 2 After Copy : ";
	PrintArray(arr2, arr2length);

	return 0;
}
----------------------------------------------------------------------------------------------------
~~Fill Array With Numbers and Print is Array Palindrome or not~~
float ReadPositiveNumber(string Message)
{
	int number;
	do
	{
		cout << Message;
		cin >> number;
	} while (number <= 0);

	return number;
}

void ReadArray(int arr[100], int& arrlength)
{
	for (int i = 0; i <= arrlength - 1; i++)
	{
		cout << "Element [" << i + 1 << "] = ";
		cin >> arr[i];
	}
	cout << "\n";
}

bool IsArrayPalindrome(int arrSource[100], int arrlength)
{
	for (int i = 0; i < arrlength; i++)
	{
		if (arrSource[i] != arrSource[arrlength - 1 - i])
			return false;
	}
	return true;
}

void PrintArray(int arr[100], int arraylength)
{
	for (int i = 0; i <= arraylength - 1; i++)
	{
		cout << arr[i] << " ";
	}
	cout << "\n";
}

int main()
{
	int arr[100];
	int arrlength = ReadPositiveNumber("Enter Number of Elements : ");

	ReadArray(arr, arrlength);
	cout << "Array  Elements : ";
	PrintArray(arr, arrlength);

	if (IsArrayPalindrome(arr, arrlength))
		cout << "\nArray is Palindrome \n";
	else
		cout << "\nArray is not Palindrome \n";

	return 0;
}
----------------------------------------------------------------------------------------------------------
~~Fill Array With Random Numbers and Count Odd Numbers~~
float ReadPositiveNumber(string Message)
{
	int number;
	do
	{
		cout << Message;
		cin >> number;
	} while (number <= 0);

	return number;
}

char RandomNumber(int From, int To)
{
	int random = rand() % (To - From + 1) + From;
	return random;
}

void FillArrayWithRandomNumbers(int arr[100], int& arrlength)
{
	for (int i = 0; i <= arrlength - 1; i++)
	{
		arr[i] = RandomNumber(1, 100);
	}
	cout << "\n";
}

int CountOddNumbersInArray(int arr[100],  int arrlength)
{
	int counter = 0;
	for (int i = 0; i < arrlength; i++)
	{
		if (arr[i] % 2 != 0)
			counter++;
	}
	return counter;
}

void PrintArray(int arr[100], int arraylength)
{
	for (int i = 0; i <= arraylength - 1; i++)
	{
		cout << arr[i] << " ";
	}
	cout << "\n";
}

int main()
{
	int arr[100];
	srand((unsigned)time(NULL));

	int arrlength = ReadPositiveNumber("Enter Number of Elements : ");
	FillArrayWithRandomNumbers(arr, arrlength);
	cout << "Array Elements : ";
	PrintArray(arr, arrlength);

	cout << "\nNumber of odd Numbers : "<<CountOddNumbers(arr, arrlength)<<endl;

	return 0;
}
--------------------------------------------------------------------------------------------------------------
~~Fill Array With Random Numbers and Count Even Numbers~~
float ReadPositiveNumber(string Message)
{
	int number;
	do
	{
		cout << Message;
		cin >> number;
	} while (number <= 0);

	return number;
}

char RandomNumber(int From, int To)
{
	int random = rand() % (To - From + 1) + From;
	return random;
}

void FillArrayWithRandomNumbers(int arr[100], int& arrlength)
{
	for (int i = 0; i <= arrlength - 1; i++)
	{
		arr[i] = RandomNumber(1, 100);
	}
	cout << "\n";
}

int CountEvenNumbersInArray(int arr[100],  int arrlength)
{
	int counter = 0;
	for (int i = 0; i < arrlength; i++)
	{
		if (arr[i] % 2 == 0)
			counter++;
	}
	return counter;
}

void PrintArray(int arr[100], int arraylength)
{
	for (int i = 0; i <= arraylength - 1; i++)
	{
		cout << arr[i] << " ";
	}
	cout << "\n";
}

int main()
{
	int arr[100];
	srand((unsigned)time(NULL));

	int arrlength = ReadPositiveNumber("Enter Number of Elements : ");
	FillArrayWithRandomNumbers(arr, arrlength);
	cout << "Array Elements : ";
	PrintArray(arr, arrlength);

	cout << "\nEven Numbers Count is : "<<CountEvenNumbers(arr, arrlength)<<endl;

	return 0;
}
--------------------------------------------------------------------------------------------------------------
~~Fill Array With Random Numbers and Count Negative Numbers~~
float ReadPositiveNumber(string Message)
{
	int number;
	do
	{
		cout << Message;
		cin >> number;
	} while (number <= 0);

	return number;
}

char RandomNumber(int From, int To)
{
	int random = rand() % (To - From + 1) + From;
	return random;
}

void FillArrayWithRandomNumbers(int arr[100], int& arrlength)
{
	for (int i = 0; i <= arrlength - 1; i++)
	{
		arr[i] = RandomNumber(-100, 100);
	}
	cout << "\n";
}

int CountNegativeNumbers(int arr[100],  int arrlength)
{
	int counter = 0;
	for (int i = 0; i < arrlength; i++)
	{
		if (arr[i] <0)
			counter++;
	}
	return counter;
}

void PrintArray(int arr[100], int arraylength)
{
	for (int i = 0; i <= arraylength - 1; i++)
	{
		cout << arr[i] << " ";
	}
	cout << "\n";
}

int main()
{
	int arr[100];
	srand((unsigned)time(NULL));

	int arrlength = ReadPositiveNumber("Enter Number of Elements : ");
	FillArrayWithRandomNumbers(arr, arrlength);
	cout << "Array Elements : ";
	PrintArray(arr, arrlength);

	cout << "\nNegative Numbers Count is : "<<CountNegativeNumbers(arr, arrlength)<<endl;

	return 0;
}
--------------------------------------------------------------------------------------------------------------------
~~ abs Function ~~
float ReadNumber()
{
	float Number;
	cout << "Enter Number : ";
	cin >> Number;

	return Number;
}

float MyaAbs(float Number)
{
	if (Number < 0)
		return Number * -1;
	else
		return Number;
}

int main()
{
	int Number = ReadNumber();
	cout << "\nMy abs Result : " << MyaAbs(Number)<<endl;
	cout << "C++ abs Result : " << abs(Number) << endl;

	return 0;
}
---------------------------------------------------------------------------------------------------------
~~ My Round Function ~~
float ReadNumber()
{
	float Number;
	cout << "Enter Number : ";
	cin >> Number;

	return Number;
}

float GetFractialFunction(float Number)
{
	return Number - (int)Number;
}

float MyRound(float Number)
{
	int IntNumber = (int)Number;
	float FractialNumber = GetFractialFunction(Number);

	if (abs(FractialNumber) >= 0.5)
	{
		if (Number > 0)
			return ++IntNumber;
		else
			return --IntNumber;
	}
	else
		return IntNumber;
}

int main()
{
	float Number = ReadNumber();
	cout << "\nMy Round Function Result : " << MyRound(Number)<<endl;
	cout << "C++ Round Function Result : " << round(Number) << endl;

	return 0;
}
--------------------------------------------------------------------------------------------------------------
~~My Ceil Function~~
float ReadNumber()
{
	float Number;
	cout << "Enter Number : ";
	cin >> Number;

	return Number;
}

float GetFractialFunction(float Number)
{
	return Number - (int)Number;
}

float MyCeil(float Number)
{
	if (abs(GetFractialFunction(Number)) > 0)
	{
		if (Number > 0)
			return (int)Number + 1;
		else
			return (int)Number;
	}
	else
		return Number;
}

int main()
{
	float Number = ReadNumber();
	cout << "\nMy Ceil Function Result : " << MyCeil(Number)<<endl;
	cout << "C++ Ceil Function Result : " << ceil(Number) << endl;

	return 0;
}
---------------------------------------------------------------------------------------------------------
~~My Sqrt Function~~
float ReadNumber()
{
	float Number;
	cout << "Enter Number : ";
	cin >> Number;

	return Number;
}

float MySqrt(float Number)
{
	return pow(Number, 0.5);
}

int main()
{
	float Number = ReadNumber();
	cout << "\nMy Sqrt Function Result : " << MySqrt(Number)<<endl;
	cout << "C++ Sqrt Function Result : " << sqrt(Number) << endl;

	return 0;
}
-------------------------------------------------------------------------------------------------------------
        



    







